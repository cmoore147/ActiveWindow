
4200_CAN_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000394c  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1fffc000  1fffc000  00014000  2**0
                  ALLOC
  2 .data         000000dc  1fffc800  0c00394c  0000c800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000040  1fffc8dc  0c003a28  0000c8dc  2**2
                  ALLOC
  4 .no_init      00000020  20005fc0  20005fc0  00014000  2**2
                  ALLOC
  5 .debug_aranges 00000d18  00000000  00000000  0000c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000127d4  00000000  00000000  0000d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d6a  00000000  00000000  0001fdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c74  00000000  00000000  00022b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003530  00000000  00000000  000297ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007a91  00000000  00000000  0002ccdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ea0  00000000  00000000  0003476d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b20  00000000  00000000  0003b60d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000653  00000000  00000000  0003c12d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800004c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	91 02 00 08 91 02 00 08 91 02 00 08 05 29 00 08     .............)..
 8000108:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 8d 27 00 08 91 02 00 08 91 02 00 08     .....'..........
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001a0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 91 02 00 08     ................
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00394c 	.word	0x0c00394c
 800024c:	1fffc800 	.word	0x1fffc800
 8000250:	000000dc 	.word	0x000000dc
 8000254:	0c00394c 	.word	0x0c00394c
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fffc8dc 	.word	0x1fffc8dc
 8000264:	00000040 	.word	0x00000040
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000270:	1fffc800 	.word	0x1fffc800

	.align	1
    .thumb
 8000274:	08000295 	.word	0x08000295
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	08003759 	.word	0x08003759
    blx  r0
#endif

    ldr  r0, =main
 800028c:	08002921 	.word	0x08002921

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000294:	b598      	push	{r3, r4, r7, lr}
 8000296:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <SystemInit+0x28>)
 800029a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800029e:	4614      	mov	r4, r2
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x2c>)
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <SystemInit+0x30>)
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002b0:	f001 fe4e 	bl	8001f50 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b4:	f001 feb6 	bl	8002024 <SystemCoreClockSetup>
}
 80002b8:	bd98      	pop	{r3, r4, r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20005fc4 	.word	0x20005fc4
 80002c0:	20005fd4 	.word	0x20005fd4
 80002c4:	20000084 	.word	0x20000084

080002c8 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <SystemCoreClockUpdate+0xc4>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d03e      	beq.n	8000358 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002e6:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e002      	b.n	80002f2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002ec:	f001 fe90 	bl	8002010 <OSCHP_GetFrequency>
 80002f0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002f2:	4b27      	ldr	r3, [pc, #156]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d020      	beq.n	8000340 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000306:	0e1b      	lsrs	r3, r3, #24
 8000308:	3301      	adds	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000322:	0c1b      	lsrs	r3, r3, #16
 8000324:	3301      	adds	r3, #1
 8000326:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	fbb2 f3f3 	udiv	r3, r2, r3
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e00d      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000348:	3301      	adds	r3, #1
 800034a:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	fbb2 f3f3 	udiv	r3, r2, r3
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	e001      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 800035a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	3301      	adds	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	fbb2 f3f3 	udiv	r3, r2, r3
 800036a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	3301      	adds	r3, #1
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	fbb2 f3f3 	udiv	r3, r2, r3
 800037c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800037e:	4a06      	ldr	r2, [pc, #24]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	50004600 	.word	0x50004600
 8000390:	50004710 	.word	0x50004710
 8000394:	016e3600 	.word	0x016e3600
 8000398:	20005fc0 	.word	0x20005fc0

0800039c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	460b      	mov	r3, r1
 80003a6:	607a      	str	r2, [r7, #4]
 80003a8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	089b      	lsrs	r3, r3, #2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4618      	mov	r0, r3
 80003b2:	7afb      	ldrb	r3, [r7, #11]
 80003b4:	089b      	lsrs	r3, r3, #2
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3204      	adds	r2, #4
 80003be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003c2:	7afb      	ldrb	r3, [r7, #11]
 80003c4:	f003 0303 	and.w	r3, r3, #3
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	4619      	mov	r1, r3
 80003cc:	23f8      	movs	r3, #248	; 0xf8
 80003ce:	408b      	lsls	r3, r1
 80003d0:	43db      	mvns	r3, r3
 80003d2:	ea02 0103 	and.w	r1, r2, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	1d02      	adds	r2, r0, #4
 80003da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4619      	mov	r1, r3
 80003e8:	2303      	movs	r3, #3
 80003ea:	408b      	lsls	r3, r1
 80003ec:	43db      	mvns	r3, r3
 80003ee:	401a      	ands	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	4a38      	ldr	r2, [pc, #224]	; (80004d8 <XMC_GPIO_Init+0x13c>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d10a      	bne.n	8000412 <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000400:	7afb      	ldrb	r3, [r7, #11]
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	401a      	ands	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	661a      	str	r2, [r3, #96]	; 0x60
 8000410:	e042      	b.n	8000498 <XMC_GPIO_Init+0xfc>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	b25b      	sxtb	r3, r3
 800041a:	2b00      	cmp	r3, #0
 800041c:	da3c      	bge.n	8000498 <XMC_GPIO_Init+0xfc>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	409a      	lsls	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4618      	mov	r0, r3
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	461a      	mov	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3210      	adds	r2, #16
 800043e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000442:	7afb      	ldrb	r3, [r7, #11]
 8000444:	f003 0307 	and.w	r3, r3, #7
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4619      	mov	r1, r3
 800044c:	2307      	movs	r3, #7
 800044e:	408b      	lsls	r3, r1
 8000450:	43db      	mvns	r3, r3
 8000452:	ea02 0103 	and.w	r1, r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f100 0210 	add.w	r2, r0, #16
 800045c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000460:	7afb      	ldrb	r3, [r7, #11]
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	b2db      	uxtb	r3, r3
 8000466:	4618      	mov	r0, r3
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	461a      	mov	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3210      	adds	r2, #16
 8000474:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	7a1b      	ldrb	r3, [r3, #8]
 800047c:	4619      	mov	r1, r3
 800047e:	7afb      	ldrb	r3, [r7, #11]
 8000480:	f003 0307 	and.w	r3, r3, #7
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	ea42 0103 	orr.w	r1, r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f100 0210 	add.w	r2, r0, #16
 8000494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	089b      	lsrs	r3, r3, #2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3204      	adds	r2, #4
 80004ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	f003 0303 	and.w	r3, r3, #3
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	ea42 0103 	orr.w	r1, r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	1d02      	adds	r2, r0, #4
 80004ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	48028e00 	.word	0x48028e00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20005fc0 	.word	0x20005fc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed8 	bl	80002c8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20005fc0 	.word	0x20005fc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f89b 	bl	80006c8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fa35 	bl	8000a00 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 fa6d 	bl	8000a7c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 fa58 	bl	8000a58 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f8ff 	bl	80007bc <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f9f0 	bl	80009b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f90d 	bl	80007f8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f930 	bl	8000848 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f917 	bl	8000820 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f93a 	bl	8000870 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 fa72 	bl	8000aec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fa97 	bl	8000b3c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000622:	f000 faaf 	bl	8000b84 <XMC_SCU_CLOCK_DisableSystemPll>
 8000626:	e014      	b.n	8000652 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000628:	f000 fa9c 	bl	8000b64 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	8899      	ldrh	r1, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000638:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4608      	mov	r0, r1
 8000648:	4611      	mov	r1, r2
 800064a:	462a      	mov	r2, r5
 800064c:	4623      	mov	r3, r4
 800064e:	f000 faa9 	bl	8000ba4 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800065a:	d103      	bne.n	8000664 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800065c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000660:	f000 f832 	bl	80006c8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000664:	f7ff fe30 	bl	80002c8 <SystemCoreClockUpdate>
}
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bdb0      	pop	{r4, r5, r7, pc}
 800066e:	bf00      	nop

08000670 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	0f1b      	lsrs	r3, r3, #28
 800067c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000684:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	461a      	mov	r2, r3
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000694:	4413      	add	r3, r2
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	50004414 	.word	0x50004414

080006a8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006ac:	f7ff ff16 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006b0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006b4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	50004600 	.word	0x50004600

080006c8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4313      	orrs	r3, r2
 80006de:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	50004600 	.word	0x50004600

080006f0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	50004600 	.word	0x50004600

08000718 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000720:	4906      	ldr	r1, [pc, #24]	; (800073c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4313      	orrs	r3, r2
 800072e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	50004600 	.word	0x50004600

08000740 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d108      	bne.n	8000762 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	60d3      	str	r3, [r2, #12]
 8000760:	e007      	b.n	8000772 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	60d3      	str	r3, [r2, #12]
  }
}
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	50004710 	.word	0x50004710

08000780 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800078a:	bf00      	nop
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800078e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f8      	bne.n	800078c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800079a:	4907      	ldr	r1, [pc, #28]	; (80007b8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007a6:	4313      	orrs	r3, r2
 80007a8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	50004000 	.word	0x50004000
 80007b8:	50004300 	.word	0x50004300

080007bc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007c6:	bf00      	nop
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007d6:	4907      	ldr	r1, [pc, #28]	; (80007f4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	50004000 	.word	0x50004000
 80007f4:	50004300 	.word	0x50004300

080007f8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800080e:	4313      	orrs	r3, r2
 8000810:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	50004600 	.word	0x50004600

08000820 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000828:	4906      	ldr	r1, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004600 	.word	0x50004600

08000848 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800085e:	4313      	orrs	r3, r2
 8000860:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	50004600 	.word	0x50004600

08000870 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000886:	4313      	orrs	r3, r2
 8000888:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	50004600 	.word	0x50004600

08000898 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008ae:	4313      	orrs	r3, r2
 80008b0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	50004600 	.word	0x50004600

080008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008d6:	4313      	orrs	r3, r2
 80008d8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	50004600 	.word	0x50004600

080008e8 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	6053      	str	r3, [r2, #4]
}
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	50004600 	.word	0x50004600

08000908 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	0f1b      	lsrs	r3, r3, #28
 8000914:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800091c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	461a      	mov	r2, r3
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 800092c:	4413      	add	r3, r2
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	601a      	str	r2, [r3, #0]
}
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	50004648 	.word	0x50004648

08000940 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800094a:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000962:	4913      	ldr	r1, [pc, #76]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	3b01      	subs	r3, #1
 8000968:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3b01      	subs	r3, #1
 800096e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000970:	4313      	orrs	r3, r2
 8000972:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000980:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f023 0310 	bic.w	r3, r3, #16
 800098a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800098c:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000996:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000998:	bf00      	nop
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f9      	beq.n	800099a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	50004710 	.word	0x50004710

080009b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009c8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d10e      	bne.n	80009ee <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009da:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009dc:	2064      	movs	r0, #100	; 0x64
 80009de:	f7ff fd95 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009e2:	4a06      	ldr	r2, [pc, #24]	; (80009fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ec:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009ee:	2064      	movs	r0, #100	; 0x64
 80009f0:	f7ff fd8c 	bl	800050c <XMC_SCU_lDelay>
}
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	50004710 	.word	0x50004710

08000a00 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a16:	bf00      	nop
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f9      	beq.n	8000a18 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00a      	beq.n	8000a46 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a38:	bf00      	nop
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1f9      	bne.n	8000a3a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	50004200 	.word	0x50004200
 8000a54:	50004400 	.word	0x50004400

08000a58 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf0c      	ite	eq
 8000a68:	2301      	moveq	r3, #1
 8000a6a:	2300      	movne	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	50004300 	.word	0x50004300

08000a7c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000a80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a84:	f7ff fd70 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a88:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a92:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000a94:	bf00      	nop
 8000a96:	f7ff fd5b 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f8      	beq.n	8000a96 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000aa4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000aa8:	f7ff fd5e 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000aae:	2208      	movs	r2, #8
 8000ab0:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000ab2:	bf00      	nop
 8000ab4:	f7ff fd4c 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f8      	beq.n	8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000ac2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ac6:	f7ff fd4f 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000ad6:	bf00      	nop
 8000ad8:	f7ff fd3a 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000adc:	4603      	mov	r3, r0
 8000ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0f8      	beq.n	8000ad8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	50004300 	.word	0x50004300

08000aec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000afa:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000afc:	4d0d      	ldr	r5, [pc, #52]	; (8000b34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b06:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b0a:	f001 fa81 	bl	8002010 <OSCHP_GetFrequency>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b12:	fba3 2302 	umull	r2, r3, r3, r2
 8000b16:	0d1b      	lsrs	r3, r3, #20
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b1c:	4323      	orrs	r3, r4
 8000b1e:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b22:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b2a:	6053      	str	r3, [r2, #4]
}
 8000b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	50004710 	.word	0x50004710
 8000b34:	50004700 	.word	0x50004700
 8000b38:	6b5fca6b 	.word	0x6b5fca6b

08000b3c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b48:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2301      	moveq	r3, #1
 8000b50:	2300      	movne	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	50004710 	.word	0x50004710

08000b64 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b72:	f023 0302 	bic.w	r3, r3, #2
 8000b76:	6053      	str	r3, [r2, #4]
}
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	50004710 	.word	0x50004710

08000b84 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	6053      	str	r3, [r2, #4]
}
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	50004710 	.word	0x50004710

08000ba4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60ba      	str	r2, [r7, #8]
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4603      	mov	r3, r0
 8000bb0:	81fb      	strh	r3, [r7, #14]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fdc1 	bl	8000740 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000bbe:	7b7b      	ldrb	r3, [r7, #13]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	f040 8084 	bne.w	8000cce <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000bcc:	f001 fa20 	bl	8002010 <OSCHP_GetFrequency>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	; (8000d00 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8000bd8:	0c9b      	lsrs	r3, r3, #18
 8000bda:	059b      	lsls	r3, r3, #22
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e002      	b.n	8000be6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000be0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000be4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	fb02 f203 	mul.w	r2, r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	4a42      	ldr	r2, [pc, #264]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	091b      	lsrs	r3, r3, #4
 8000c00:	0d9b      	lsrs	r3, r3, #22
 8000c02:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c04:	4a40      	ldr	r2, [pc, #256]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c06:	4b40      	ldr	r3, [pc, #256]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c10:	4a3d      	ldr	r2, [pc, #244]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c1c:	493a      	ldr	r1, [pc, #232]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1e:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c24:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	3a01      	subs	r2, #1
 8000c2a:	0212      	lsls	r2, r2, #8
 8000c2c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c34:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c40:	4a31      	ldr	r2, [pc, #196]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c42:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c4c:	4a2e      	ldr	r2, [pc, #184]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f023 0310 	bic.w	r3, r3, #16
 8000c56:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c58:	4a2b      	ldr	r2, [pc, #172]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c62:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c64:	bf00      	nop
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f9      	beq.n	8000c66 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c72:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c7e:	bf00      	nop
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1f9      	bne.n	8000c80 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c90:	fba2 2303 	umull	r2, r3, r2, r3
 8000c94:	095b      	lsrs	r3, r3, #5
 8000c96:	0d9b      	lsrs	r3, r3, #22
 8000c98:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c9a:	6a3a      	ldr	r2, [r7, #32]
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d202      	bcs.n	8000ca8 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000ca2:	6938      	ldr	r0, [r7, #16]
 8000ca4:	f000 f838 	bl	8000d18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	085b      	lsrs	r3, r3, #1
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	0d9b      	lsrs	r3, r3, #22
 8000cb6:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cb8:	6a3a      	ldr	r2, [r7, #32]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d202      	bcs.n	8000cc6 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000cc0:	6938      	ldr	r0, [r7, #16]
 8000cc2:	f000 f829 	bl	8000d18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000cc6:	6a38      	ldr	r0, [r7, #32]
 8000cc8:	f000 f826 	bl	8000d18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000ccc:	e015      	b.n	8000cfa <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cce:	490e      	ldr	r1, [pc, #56]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cec:	bf00      	nop
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f9      	beq.n	8000cee <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	431bde83 	.word	0x431bde83
 8000d04:	aaaaaaab 	.word	0xaaaaaaab
 8000d08:	50004710 	.word	0x50004710
 8000d0c:	f08080ff 	.word	0xf08080ff
 8000d10:	88888889 	.word	0x88888889
 8000d14:	b60b60b7 	.word	0xb60b60b7

08000d18 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d20:	4907      	ldr	r1, [pc, #28]	; (8000d40 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d30:	4313      	orrs	r3, r2
 8000d32:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d34:	2032      	movs	r0, #50	; 0x32
 8000d36:	f7ff fbe9 	bl	800050c <XMC_SCU_lDelay>
}
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	50004710 	.word	0x50004710

08000d44 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	bf0c      	ite	eq
 8000d5a:	2301      	moveq	r3, #1
 8000d5c:	2300      	movne	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	70fb      	strb	r3, [r7, #3]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	70bb      	strb	r3, [r7, #2]
 8000d82:	4613      	mov	r3, r2
 8000d84:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d86:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000d88:	78bb      	ldrb	r3, [r7, #2]
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d90:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000d92:	787b      	ldrb	r3, [r7, #1]
 8000d94:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000d96:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	601a      	str	r2, [r3, #0]
}
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4293      	cmp	r3, r2
 8000df8:	bf38      	it	cc
 8000dfa:	4613      	movcc	r3, r2
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4293      	cmp	r3, r2
 8000e18:	bf28      	it	cs
 8000e1a:	4613      	movcs	r3, r2
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
                                               const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	6852      	ldr	r2, [r2, #4]
 8000e3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e3e:	fb02 f201 	mul.w	r2, r2, r1
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f040 808e 	bne.w	8000f66 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
  {
    uint32_t prescaler;
    uint32_t div8 = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8000e5c:	2319      	movs	r3, #25
 8000e5e:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000e68:	e04b      	b.n	8000f02 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e72:	6979      	ldr	r1, [r7, #20]
 8000e74:	fb01 f202 	mul.w	r2, r1, r2
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d13e      	bne.n	8000efc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
      {
    	  div8 = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d034      	beq.n	8000efc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e98:	d830      	bhi.n	8000efc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        {
          if (prescaler >= 64)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e9e:	d90a      	bls.n	8000eb6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8a>
            {
              --ntq;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
              continue;
 8000eb0:	e027      	b.n	8000f02 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
            }
            else
            {
              div8 = 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	8912      	ldrh	r2, [r2, #8]
 8000ebe:	fb02 f303 	mul.w	r3, r2, r3
 8000ec2:	4a2b      	ldr	r2, [pc, #172]	; (8000f70 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x148>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	0b5b      	lsrs	r3, r3, #13
 8000eca:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d90f      	bls.n	8000efc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	d80c      	bhi.n	8000efc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d909      	bls.n	8000efc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d806      	bhi.n	8000efc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	895b      	ldrh	r3, [r3, #10]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d800      	bhi.n	8000efc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
          {
            break;
 8000efa:	e005      	b.n	8000f08 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe0>
          }


        }
      }
      --ntq;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	2b07      	cmp	r3, #7
 8000f06:	d8b0      	bhi.n	8000e6a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x42>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d92b      	bls.n	8000f66 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
    {


      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4a 	bl	8000da8 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	031b      	lsls	r3, r3, #12
 8000f1a:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	895b      	ldrh	r3, [r3, #10]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	019b      	lsls	r3, r3, #6
 8000f26:	b2db      	uxtb	r3, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f28:	431a      	orrs	r2, r3
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8000f34:	ea42 0103 	orr.w	r1, r2, r3
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	40d3      	lsrs	r3, r2
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8000f4c:	ea41 0203 	orr.w	r2, r1, r3
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	03db      	lsls	r3, r3, #15
 8000f54:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8000f56:	431a      	orrs	r2, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	611a      	str	r2, [r3, #16]
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff33 	bl	8000dc8 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x140>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	d1b71759 	.word	0xd1b71759

08000f74 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
 8000f80:	4613      	mov	r3, r2
 8000f82:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8000f84:	bf00      	nop
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff fedc 	bl	8000d44 <XMC_CAN_IsPanelControlReady>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f083 0301 	eor.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f6      	bne.n	8000f86 <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	78ba      	ldrb	r2, [r7, #2]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	f7ff fee2 	bl	8000d6c <XMC_CAN_PanelControl>
}
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop

08000fb0 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 8000fb8:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <XMC_CAN_Enable+0x34>)
 8000fba:	f7ff fca5 	bl	8000908 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8000fbe:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <XMC_CAN_Enable+0x34>)
 8000fc0:	f7ff fb56 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 0201 	bic.w	r2, r3, #1
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8000fd0:	bf00      	nop
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f9      	bne.n	8000fd2 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	10000010 	.word	0x10000010

08000fe8 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
      frequency = 0;
      break;
  }
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001008:	f7ff fb4e 	bl	80006a8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800100c:	60f8      	str	r0, [r7, #12]
#endif  

  return frequency;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	460b      	mov	r3, r1
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f7ff ffc2 	bl	8000fb0 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff ffd9 	bl	8000fe8 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff ffe2 	bl	8001000 <XMC_CAN_GetBaudrateClockFrequency>
 800103c:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800104a:	2000      	movs	r0, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fecb 	bl	8000de8 <max>
 8001052:	4603      	mov	r3, r0
 8001054:	4618      	mov	r0, r3
 8001056:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800105a:	f7ff fed5 	bl	8000e08 <min>
 800105e:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	fbb2 f3f3 	udiv	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	60da      	str	r2, [r3, #12]

  return freq_n;
 800108e:	697b      	ldr	r3, [r7, #20]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 80010a8:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80010ac:	095b      	lsrs	r3, r3, #5
 80010ae:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	035a      	lsls	r2, r3, #13
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	6892      	ldr	r2, [r2, #8]
 80010cc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80010d0:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	6891      	ldr	r1, [r2, #8]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	430a      	orrs	r2, r1
 80010e0:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	79db      	ldrb	r3, [r3, #7]
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	79db      	ldrb	r3, [r3, #7]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <XMC_CAN_MO_Config+0x68>
 80010fe:	e060      	b.n	80011c2 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 800110c:	2b01      	cmp	r3, #1
 800110e:	d000      	beq.n	8001112 <XMC_CAN_MO_Config+0x7a>
 8001110:	e057      	b.n	80011c2 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2220      	movs	r2, #32
 8001118:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	79db      	ldrb	r3, [r3, #7]
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d128      	bne.n	800117a <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001134:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800113e:	049b      	lsls	r3, r3, #18
 8001140:	461a      	mov	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800115c:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001166:	049b      	lsls	r3, r3, #18
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	e009      	b.n	800118e <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6852      	ldr	r2, [r2, #4]
 8001182:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6892      	ldr	r2, [r2, #8]
 800118c:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7e1b      	ldrb	r3, [r3, #24]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d10c      	bne.n	80011b0 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f81a 	bl	80011d0 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a4:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <XMC_CAN_MO_Config+0x130>)
 80011ac:	61da      	str	r2, [r3, #28]
 80011ae:	e008      	b.n	80011c2 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b8:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a03      	ldr	r2, [pc, #12]	; (80011cc <XMC_CAN_MO_Config+0x134>)
 80011c0:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	062000c0 	.word	0x062000c0
 80011cc:	00a00640 	.word	0x00a00640

080011d0 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80011d8:	2303      	movs	r3, #3
 80011da:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7e1b      	ldrb	r3, [r3, #24]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d122      	bne.n	800122a <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2220      	movs	r2, #32
 80011ea:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	7b12      	ldrb	r2, [r2, #12]
 80011fe:	0612      	lsls	r2, r2, #24
 8001200:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6912      	ldr	r2, [r2, #16]
 8001210:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6952      	ldr	r2, [r2, #20]
 800121a:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <XMC_CAN_MO_UpdateData+0x6c>)
 8001222:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800122a:	2303      	movs	r3, #3
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	00280040 	.word	0x00280040

08001240 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 800126e:	2304      	movs	r3, #4
 8001270:	75fb      	strb	r3, [r7, #23]
 8001272:	e00c      	b.n	800128e <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d102      	bne.n	8001280 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800127a:	2302      	movs	r3, #2
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e006      	b.n	800128e <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001288:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001290:	4618      	mov	r0, r3
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ba:	0adb      	lsrs	r3, r3, #11
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012d2:	2303      	movs	r3, #3
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e0a7      	b.n	8001428 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d102      	bne.n	80012e4 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 80012de:	2302      	movs	r3, #2
 80012e0:	75fb      	strb	r3, [r7, #23]
 80012e2:	e0a1      	b.n	8001428 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2208      	movs	r2, #8
 80012ea:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012f6:	0f5b      	lsrs	r3, r3, #29
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d140      	bne.n	800137e <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	79d3      	ldrb	r3, [r2, #7]
 8001300:	f36f 1345 	bfc	r3, #5, #1
 8001304:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <XMC_CAN_MO_Receive+0x19c>)
 800130e:	4013      	ands	r3, r2
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6853      	ldr	r3, [r2, #4]
 800131a:	f361 031c 	bfi	r3, r1, #0, #29
 800131e:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800132a:	0f5b      	lsrs	r3, r3, #29
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	b2d9      	uxtb	r1, r3
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	7ad3      	ldrb	r3, [r2, #11]
 8001338:	f361 1345 	bfi	r3, r1, #5, #1
 800133c:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7adb      	ldrb	r3, [r3, #11]
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00d      	beq.n	8001368 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	4b39      	ldr	r3, [pc, #228]	; (8001438 <XMC_CAN_MO_Receive+0x19c>)
 8001354:	4013      	ands	r3, r2
 8001356:	0c9b      	lsrs	r3, r3, #18
 8001358:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6893      	ldr	r3, [r2, #8]
 8001360:	f361 031c 	bfi	r3, r1, #0, #29
 8001364:	6093      	str	r3, [r2, #8]
 8001366:	e032      	b.n	80013ce <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6893      	ldr	r3, [r2, #8]
 8001376:	f361 031c 	bfi	r3, r1, #0, #29
 800137a:	6093      	str	r3, [r2, #8]
 800137c:	e027      	b.n	80013ce <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	79d3      	ldrb	r3, [r2, #7]
 8001382:	f043 0320 	orr.w	r3, r3, #32
 8001386:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6853      	ldr	r3, [r2, #4]
 8001396:	f361 031c 	bfi	r3, r1, #0, #29
 800139a:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6893      	ldr	r3, [r2, #8]
 80013aa:	f361 031c 	bfi	r3, r1, #0, #29
 80013ae:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ba:	0f5b      	lsrs	r3, r3, #29
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	b2d9      	uxtb	r1, r3
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	7ad3      	ldrb	r3, [r2, #11]
 80013c8:	f361 1345 	bfi	r3, r1, #5, #1
 80013cc:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80013d8:	0e1b      	lsrs	r3, r3, #24
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 8001410:	7dbb      	ldrb	r3, [r7, #22]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <XMC_CAN_MO_Receive+0x182>
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f47f af63 	bne.w	80012e4 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 8001424:	2300      	movs	r3, #0
 8001426:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
}
 800142a:	4618      	mov	r0, r3
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	1ffc0000 	.word	0x1ffc0000

0800143c <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800144c:	d006      	beq.n	800145c <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e005      	b.n	8001468 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699a      	ldr	r2, [r3, #24]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
}
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop

08001474 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001482:	60da      	str	r2, [r3, #12]
}
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <XMC_CCU4_lDeassertReset+0x2c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d103      	bne.n	80014a8 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80014a0:	2004      	movs	r0, #4
 80014a2:	f7ff f8e5 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
 80014a6:	e006      	b.n	80014b6 <XMC_CCU4_lDeassertReset+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <XMC_CCU4_lDeassertReset+0x30>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d102      	bne.n	80014b6 <XMC_CCU4_lDeassertReset+0x26>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80014b0:	2008      	movs	r0, #8
 80014b2:	f7ff f8dd 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	4000c000 	.word	0x4000c000
 80014c0:	40010000 	.word	0x40010000

080014c4 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <XMC_CCU4_lUngateClock+0x2c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d103      	bne.n	80014dc <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80014d4:	2004      	movs	r0, #4
 80014d6:	f7ff fa17 	bl	8000908 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80014da:	e006      	b.n	80014ea <XMC_CCU4_lUngateClock+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <XMC_CCU4_lUngateClock+0x30>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d102      	bne.n	80014ea <XMC_CCU4_lUngateClock+0x26>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80014e4:	2008      	movs	r0, #8
 80014e6:	f7ff fa0f 	bl	8000908 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	4000c000 	.word	0x4000c000
 80014f4:	40010000 	.word	0x40010000

080014f8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001500:	2010      	movs	r0, #16
 8001502:	f7ff f9f1 	bl	80008e8 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffdc 	bl	80014c4 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ffbf 	bl	8001490 <XMC_CCU4_lDeassertReset>
#endif
}
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffe7 	bl	80014f8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800153c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	039b      	lsls	r3, r3, #14
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	601a      	str	r2, [r3, #0]
}
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	795b      	ldrb	r3, [r3, #5]
 800156a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	051a      	lsls	r2, r3, #20
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	791b      	ldrb	r3, [r3, #4]
 800157a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	795b      	ldrb	r3, [r3, #5]
 800158a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	795b      	ldrb	r3, [r3, #5]
 800159a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	791b      	ldrb	r3, [r3, #4]
 80015aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
 80015cc:	4613      	mov	r3, r2
 80015ce:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015d6:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b09      	cmp	r3, #9
 80015dc:	d82c      	bhi.n	8001638 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	0800160d 	.word	0x0800160d
 80015e8:	0800160d 	.word	0x0800160d
 80015ec:	08001617 	.word	0x08001617
 80015f0:	08001617 	.word	0x08001617
 80015f4:	08001639 	.word	0x08001639
 80015f8:	08001639 	.word	0x08001639
 80015fc:	08001639 	.word	0x08001639
 8001600:	08001639 	.word	0x08001639
 8001604:	08001621 	.word	0x08001621
 8001608:	0800162d 	.word	0x0800162d
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 800160c:	2303      	movs	r3, #3
 800160e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
      break;
 8001614:	e016      	b.n	8001644 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001616:	230c      	movs	r3, #12
 8001618:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800161a:	2302      	movs	r3, #2
 800161c:	617b      	str	r3, [r7, #20]
      break;
 800161e:	e011      	b.n	8001644 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8001620:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001624:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001626:	2308      	movs	r3, #8
 8001628:	617b      	str	r3, [r7, #20]
      break;
 800162a:	e00b      	b.n	8001644 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 800162c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001630:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8001632:	230a      	movs	r3, #10
 8001634:	617b      	str	r3, [r7, #20]
      break;
 8001636:	e005      	b.n	8001644 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001638:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800163c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800163e:	230c      	movs	r3, #12
 8001640:	617b      	str	r3, [r7, #20]
      break;
 8001642:	bf00      	nop
  }
  
  srs &= ~mask; 
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800164e:	78ba      	ldrb	r2, [r7, #2]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4313      	orrs	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop

08001670 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
 800167c:	4613      	mov	r3, r2
 800167e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4619      	mov	r1, r3
 800168a:	2303      	movs	r3, #3
 800168c:	408b      	lsls	r3, r1
 800168e:	43db      	mvns	r3, r3
 8001690:	401a      	ands	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800169a:	78bb      	ldrb	r3, [r7, #2]
 800169c:	78f9      	ldrb	r1, [r7, #3]
 800169e:	0049      	lsls	r1, r1, #1
 80016a0:	408b      	lsls	r3, r1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop

080016b4 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	2201      	movs	r2, #1
 80016d0:	409a      	lsls	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60da      	str	r2, [r3, #12]
}
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf14      	ite	ne
 80016f4:	2301      	movne	r3, #1
 80016f6:	2300      	moveq	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop

08001708 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	60da      	str	r2, [r3, #12]
}
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	611a      	str	r2, [r3, #16]
}
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	611a      	str	r2, [r3, #16]
}
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001778:	887a      	ldrh	r2, [r7, #2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	611a      	str	r2, [r3, #16]
}
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop

080017a4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	2101      	movs	r1, #1
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80017e2:	f083 0301 	eor.w	r3, r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d009      	beq.n	8001800 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d104      	bne.n	8001800 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f862 	bl	80018c0 <TIMER_CCU4_lInit>
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop

0800180c <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00c      	beq.n	8001838 <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001824:	2b00      	cmp	r3, #0
 8001826:	d104      	bne.n	8001832 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff6b 	bl	8001708 <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e001      	b.n	800183c <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop

08001848 <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f81d 	bl	8001890 <TIMER_GetTimerStatus>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d011      	beq.n	8001880 <TIMER_Stop+0x38>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00c      	beq.n	8001880 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800186c:	2b00      	cmp	r3, #0
 800186e:	d104      	bne.n	800187a <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff53 	bl	8001720 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e001      	b.n	8001884 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop

08001890 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff18 	bl	80016e0 <XMC_CCU4_SLICE_IsTimerRunning>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop

080018c0 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fabb 	bl	8001e48 <GLOBAL_CCU4_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7e1b      	ldrb	r3, [r3, #24]
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff feec 	bl	80016c0 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff fe2e 	bl	8001554 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f82d 	bl	8001958 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00f      	beq.n	8001928 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001912:	4610      	mov	r0, r2
 8001914:	2100      	movs	r1, #0
 8001916:	461a      	mov	r2, r3
 8001918:	f7ff fe52 	bl	80015c0 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4618      	mov	r0, r3
 8001922:	2100      	movs	r1, #0
 8001924:	f7ff ff3e 	bl	80017a4 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff03 	bl	8001738 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fedd 	bl	8001708 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f7ff fef0 	bl	8001750 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	4618      	mov	r0, r3
 8001976:	2100      	movs	r1, #0
 8001978:	f7ff fef8 	bl	800176c <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff fefd 	bl	8001788 <XMC_CCU4_EnableShadowTransfer>
}
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	2201      	movs	r2, #1
 80019a4:	409a      	lsls	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60da      	str	r2, [r3, #12]
}
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <XMC_CCU4_DisableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLS = ((uint32_t) 1) << slice_number;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	2201      	movs	r2, #1
 80019c4:	409a      	lsls	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]
}
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	60da      	str	r2, [r3, #12]
}
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	611a      	str	r2, [r3, #16]
}
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	611a      	str	r2, [r3, #16]
}
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	611a      	str	r2, [r3, #16]
}
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d14d      	bne.n	8001b4e <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f9c6 	bl	8001e48 <GLOBAL_CCU4_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d13f      	bne.n	8001b46 <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff fd3f 	bl	8001554 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff ff9a 	bl	8001a1c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff ff9f 	bl	8001a38 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff ffa5 	bl	8001a54 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f824 	bl	8001b58 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6919      	ldr	r1, [r3, #16]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4611      	mov	r1, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	f7fe fc3a 	bl	800039c <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f89c 	bl	8001c78 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e003      	b.n	8001b4e <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00f      	beq.n	8001b8a <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	2100      	movs	r1, #0
 8001b72:	f7ff ff7d 	bl	8001a70 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b80:	4610      	mov	r0, r2
 8001b82:	2100      	movs	r1, #0
 8001b84:	461a      	mov	r2, r3
 8001b86:	f7ff fd1b 	bl	80015c0 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	f7ff ff68 	bl	8001a70 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001baa:	4610      	mov	r0, r2
 8001bac:	2102      	movs	r1, #2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f7ff fd06 	bl	80015c0 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop

08001bbc <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <PWM_lCCU4_Start+0x1c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d111      	bne.n	8001bfc <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff fed5 	bl	8001994 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fef0 	bl	80019d4 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop

08001c04 <PWM_lCCU4_Stop>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Stops the CCU4 slice. */
void PWM_lCCU4_Stop(PWM_t *const handle_ptr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d016      	beq.n	8001c44 <PWM_lCCU4_Stop+0x40>
  {
    XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fee6 	bl	80019ec <XMC_CCU4_SLICE_StopTimer>
    XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff feed 	bl	8001a04 <XMC_CCU4_SLICE_ClearTimer>
    XMC_CCU4_DisableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7ff febc 	bl	80019b4 <XMC_CCU4_DisableClock>

    handle_ptr->state = PWM_STATUS_STOPPED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Stop:stop PWM")
  }
} /* end of PWM_lCCU4_Stop() api */
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop

08001c4c <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d104      	bne.n	8001c6c <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ff1a 	bl	8001a9c <PWM_lCCU4_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop

08001c78 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ff96 	bl	8001bbc <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop

08001c98 <PWM_Stop>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function stops the PWM generation. */
void PWM_Stop(PWM_t *const handle_ptr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("PWM_Stop:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <PWM_Stop+0x18>
  {
    PWM_lCCU4_Stop(handle_ptr);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffaa 	bl	8001c04 <PWM_lCCU4_Stop>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Stop(handle_ptr);
  }
#endif
}
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cc4:	0a1b      	lsrs	r3, r3, #8
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0b      	blt.n	8001cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_EnableIRQ+0x34>)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	79fa      	ldrb	r2, [r7, #7]
 8001cf0:	f002 021f 	and.w	r2, r2, #31
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	490d      	ldr	r1, [pc, #52]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	4909      	ldr	r1, [pc, #36]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
  }
}
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	bf28      	it	cs
 8001d7e:	2306      	movcs	r3, #6
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3306      	adds	r3, #6
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2201      	movs	r2, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	1e5a      	subs	r2, r3, #1
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	401a      	ands	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	1e59      	subs	r1, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001db4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop

08001dc4 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff7e 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop

08001de0 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	781c      	ldrb	r4, [r3, #0]
 8001dec:	f7ff ff64 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001df0:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001df6:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	f7ff ffad 	bl	8001d60 <NVIC_EncodePriority>
 8001e06:	4602      	mov	r2, r0
 8001e08:	b263      	sxtb	r3, r4
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	f7ff ff7d 	bl	8001d0c <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	78db      	ldrb	r3, [r3, #3]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffd2 	bl	8001dc4 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop

08001e2c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3a:	60da      	str	r2, [r3, #12]
}
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7b5b      	ldrb	r3, [r3, #13]
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00f      	beq.n	8001e7e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7b1b      	ldrb	r3, [r3, #12]
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7ff fb55 	bl	8001518 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ffda 	bl	8001e2c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7a5b      	ldrb	r3, [r3, #9]
 8001e98:	f083 0301 	eor.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4610      	mov	r0, r2
 8001eac:	2101      	movs	r1, #1
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f7ff f8b2 	bl	8001018 <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]

}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6819      	ldr	r1, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7c1a      	ldrb	r2, [r3, #16]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f7fe fa5b 	bl	800039c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7c1a      	ldrb	r2, [r3, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7c5b      	ldrb	r3, [r3, #17]
 8001ef2:	4608      	mov	r0, r1
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7ff fbba 	bl	8001670 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7ff ffd6 	bl	8001f08 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001f60:	4a21      	ldr	r2, [pc, #132]	; (8001fe8 <SystemCoreSetup+0x98>)
 8001f62:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f64:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001f68:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <SystemCoreSetup+0x9c>)
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f80:	3314      	adds	r3, #20
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f023 030f 	bic.w	r3, r3, #15
 8001f8c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <SystemCoreSetup+0x9c>)
 8001f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9c:	3314      	adds	r3, #20
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f023 0310 	bic.w	r3, r3, #16
 8001fac:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8001fae:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f023 0308 	bic.w	r3, r3, #8
 8001fb8:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8001fc6:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001fd0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <SystemCoreSetup+0x94>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fdc:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	08000000 	.word	0x08000000
 8001fec:	58001000 	.word	0x58001000

08001ff0 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]

  return (status);
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002014:	4b02      	ldr	r3, [pc, #8]	; (8002020 <OSCHP_GetFrequency+0x10>)
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	00b71b00 	.word	0x00b71b00

08002024 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <SystemCoreClockSetup+0x48>)
 800202c:	1d3c      	adds	r4, r7, #4
 800202e:	461d      	mov	r5, r3
 8002030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe faa2 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002040:	2000      	movs	r0, #0
 8002042:	f7fe fb9d 	bl	8000780 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002046:	2000      	movs	r0, #0
 8002048:	f7fe fb52 	bl	80006f0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800204c:	2004      	movs	r0, #4
 800204e:	f7fe fc23 	bl	8000898 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002052:	2001      	movs	r0, #1
 8002054:	2120      	movs	r1, #32
 8002056:	f7fe fc73 	bl	8000940 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800205a:	2000      	movs	r0, #0
 800205c:	f7fe fb5c 	bl	8000718 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002060:	2001      	movs	r0, #1
 8002062:	f7fe fc2d 	bl	80008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bdb0      	pop	{r4, r5, r7, pc}
 800206c:	0800384c 	.word	0x0800384c

08002070 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	460b      	mov	r3, r1
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	2107      	movs	r1, #7
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	401a      	ands	r2, r3
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	431a      	orrs	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop

080020a8 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop

080020d4 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]
}
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop

080020f4 <XMC_CAN_NODE_GetStatus>:
 *  XMC_CAN_NODE_ClearStatus()
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return ((can_node->NSR));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	601a      	str	r2, [r3, #0]
}
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop

0800212c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	601a      	str	r2, [r3, #0]
}
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	601a      	str	r2, [r3, #0]
}
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 0201 	bic.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	601a      	str	r2, [r3, #0]
}
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	460b      	mov	r3, r1
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	6891      	ldr	r1, [r2, #8]
 80021c4:	7afa      	ldrb	r2, [r7, #11]
 80021c6:	2007      	movs	r0, #7
 80021c8:	fa00 f202 	lsl.w	r2, r0, r2
 80021cc:	43d2      	mvns	r2, r2
 80021ce:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 80021d0:	7afa      	ldrb	r2, [r7, #11]
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	69db      	ldr	r3, [r3, #28]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop

08002204 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	6811      	ldr	r1, [r2, #0]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800223a:	f7ff ffe3 	bl	8002204 <XMC_CAN_MO_EnableEvent>
}
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002256:	f7ff ffd5 	bl	8002204 <XMC_CAN_MO_EnableEvent>
}
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f831 	bl	80022d4 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f043 0308 	orr.w	r3, r3, #8
 80022a6:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	f7ff f8c4 	bl	800143c <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80022c8:	f7ff f8b8 	bl	800143c <XMC_CAN_NODE_EnableEvent>
  }

}
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop

080022d4 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e6:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 80022e8:	4610      	mov	r0, r2
 80022ea:	2100      	movs	r1, #0
 80022ec:	461a      	mov	r2, r3
 80022ee:	f7ff febf 	bl	8002070 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fc:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 80022fe:	4610      	mov	r0, r2
 8002300:	2104      	movs	r1, #4
 8002302:	461a      	mov	r2, r3
 8002304:	f7ff feb4 	bl	8002070 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002312:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8002314:	4610      	mov	r0, r2
 8002316:	2108      	movs	r1, #8
 8002318:	461a      	mov	r2, r3
 800231a:	f7ff fea9 	bl	8002070 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002328:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800232a:	4610      	mov	r0, r2
 800232c:	210c      	movs	r1, #12
 800232e:	461a      	mov	r2, r3
 8002330:	f7ff fe9e 	bl	8002070 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop

0800233c <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fea5 	bl	8001098 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	79db      	ldrb	r3, [r3, #7]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	795b      	ldrb	r3, [r3, #5]
 800235e:	4610      	mov	r0, r2
 8002360:	2104      	movs	r1, #4
 8002362:	461a      	mov	r2, r3
 8002364:	f7ff ff22 	bl	80021ac <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff5d 	bl	8002228 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7a1b      	ldrb	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	799b      	ldrb	r3, [r3, #6]
 800237e:	4610      	mov	r0, r2
 8002380:	2100      	movs	r1, #0
 8002382:	461a      	mov	r2, r3
 8002384:	f7ff ff12 	bl	80021ac <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff5b 	bl	8002244 <CAN_NODE_MO_EnableRxEvent>
  }

}
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe ff4b 	bl	8001240 <XMC_CAN_MO_Transmit>
 80023aa:	4603      	mov	r3, r0
 80023ac:	73fb      	strb	r3, [r7, #15]
  return (status);
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe ff67 	bl	800129c <XMC_CAN_MO_Receive>
 80023ce:	4603      	mov	r3, r0
 80023d0:	73fb      	strb	r3, [r7, #15]
  return (status);
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <CAN_NODE_MO_GetStatus>:
  return (status);
}

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fefd 	bl	80021e8 <XMC_CAN_MO_GetStatus>
 80023ee:	60f8      	str	r0, [r7, #12]

  return (status);
 80023f0:	68fb      	ldr	r3, [r7, #12]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop

080023fc <CAN_NODE_GetStatus>:

}

/* Function to read the current status of the CAN node  */
uint32_t CAN_NODE_GetStatus(const CAN_NODE_t* handle)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t  status;

  XMC_ASSERT("CAN_NODE_GetStatus: handle null", handle != NULL);

  XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  status = XMC_CAN_NODE_GetStatus(can_node);
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7ff fe72 	bl	80020f4 <XMC_CAN_NODE_GetStatus>
 8002410:	60b8      	str	r0, [r7, #8]
  return (status);
 8002412:	68bb      	ldr	r3, [r7, #8]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8002424:	2300      	movs	r3, #0
 8002426:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fd27 	bl	8001e88 <GLOBAL_CAN_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 8087 	bne.w	8002554 <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fce9 	bl	8000e28 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d178      	bne.n	800254e <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fe53 	bl	800210c <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fe6e 	bl	800214c <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fe89 	bl	800218c <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fe23 	bl	80020d4 <XMC_CAN_NODE_EnableLoopBack>
 800248e:	e018      	b.n	80024c2 <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002496:	6819      	ldr	r1, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800249e:	791a      	ldrb	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024a6:	4608      	mov	r0, r1
 80024a8:	4611      	mov	r1, r2
 80024aa:	461a      	mov	r2, r3
 80024ac:	f7fd ff76 	bl	800039c <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	f7ff fdf3 	bl	80020a8 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fecc 	bl	8002260 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	e019      	b.n	8002502 <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	3302      	adds	r3, #2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7fe fd3f 	bl	8000f74 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 80024f6:	68b8      	ldr	r0, [r7, #8]
 80024f8:	f7ff ff20 	bl	800233c <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	3301      	adds	r3, #1
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002508:	461a      	mov	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	429a      	cmp	r2, r3
 800250e:	d8de      	bhi.n	80024ce <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fe09 	bl	800212c <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fe24 	bl	800216c <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800252a:	f083 0301 	eor.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d011      	beq.n	8002558 <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	791a      	ldrb	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002542:	4608      	mov	r0, r1
 8002544:	4611      	mov	r1, r2
 8002546:	461a      	mov	r2, r3
 8002548:	f7fd ff28 	bl	800039c <XMC_GPIO_Init>
 800254c:	e004      	b.n	8002558 <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
 8002552:	e001      	b.n	8002558 <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8002554:	2301      	movs	r3, #1
 8002556:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8002558:	7dfb      	ldrb	r3, [r7, #23]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop

08002564 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800256a:	2300      	movs	r3, #0
 800256c:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800256e:	4835      	ldr	r0, [pc, #212]	; (8002644 <DAVE_Init+0xe0>)
 8002570:	f7ff fd3e 	bl	8001ff0 <CLOCK_XMC4_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d104      	bne.n	8002588 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_Indicator */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_Indicator); 
 800257e:	4832      	ldr	r0, [pc, #200]	; (8002648 <DAVE_Init+0xe4>)
 8002580:	f7ff fca2 	bl	8001ec8 <DIGITAL_IO_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance BoardButton */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BoardButton); 
 800258e:	482f      	ldr	r0, [pc, #188]	; (800264c <DAVE_Init+0xe8>)
 8002590:	f7ff fc9a 	bl	8001ec8 <DIGITAL_IO_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d104      	bne.n	80025a8 <DAVE_Init+0x44>
  {
	 /**  Initialization of CAN_NODE APP instance React_Node */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&React_Node); 
 800259e:	482c      	ldr	r0, [pc, #176]	; (8002650 <DAVE_Init+0xec>)
 80025a0:	f7ff ff3c 	bl	800241c <CAN_NODE_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance Receive_CAN_Handler */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&Receive_CAN_Handler); 
 80025ae:	4829      	ldr	r0, [pc, #164]	; (8002654 <DAVE_Init+0xf0>)
 80025b0:	f7ff fc16 	bl	8001de0 <INTERRUPT_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <DAVE_Init+0x64>
  {
	 /**  Initialization of PWM APP instance PWM_Motor */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Motor); 
 80025be:	4826      	ldr	r0, [pc, #152]	; (8002658 <DAVE_Init+0xf4>)
 80025c0:	f7ff fb44 	bl	8001c4c <PWM_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance LIMIT_SWITCH_BOTTOM */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LIMIT_SWITCH_BOTTOM); 
 80025ce:	4823      	ldr	r0, [pc, #140]	; (800265c <DAVE_Init+0xf8>)
 80025d0:	f7ff fc7a 	bl	8001ec8 <DIGITAL_IO_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d104      	bne.n	80025e8 <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance LIMIT_SWITCH_TOP */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LIMIT_SWITCH_TOP); 
 80025de:	4820      	ldr	r0, [pc, #128]	; (8002660 <DAVE_Init+0xfc>)
 80025e0:	f7ff fc72 	bl	8001ec8 <DIGITAL_IO_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d104      	bne.n	80025f8 <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance MOS_DOWN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MOS_DOWN); 
 80025ee:	481d      	ldr	r0, [pc, #116]	; (8002664 <DAVE_Init+0x100>)
 80025f0:	f7ff fc6a 	bl	8001ec8 <DIGITAL_IO_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MOS_UP */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MOS_UP); 
 80025fe:	481a      	ldr	r0, [pc, #104]	; (8002668 <DAVE_Init+0x104>)
 8002600:	f7ff fc62 	bl	8001ec8 <DIGITAL_IO_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d104      	bne.n	8002618 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance Motor_Direction */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Motor_Direction); 
 800260e:	4817      	ldr	r0, [pc, #92]	; (800266c <DAVE_Init+0x108>)
 8002610:	f7ff fc5a 	bl	8001ec8 <DIGITAL_IO_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <DAVE_Init+0xc4>
  {
	 /**  Initialization of TIMER APP instance TIMER_Motor */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_Motor); 
 800261e:	4814      	ldr	r0, [pc, #80]	; (8002670 <DAVE_Init+0x10c>)
 8002620:	f7ff f8d6 	bl	80017d0 <TIMER_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d104      	bne.n	8002638 <DAVE_Init+0xd4>
  {
	 /**  Initialization of INTERRUPT APP instance Timer_Interrupt */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&Timer_Interrupt); 
 800262e:	4811      	ldr	r0, [pc, #68]	; (8002674 <DAVE_Init+0x110>)
 8002630:	f7ff fbd6 	bl	8001de0 <INTERRUPT_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002638:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	1fffc8dc 	.word	0x1fffc8dc
 8002648:	080037c0 	.word	0x080037c0
 800264c:	080037d4 	.word	0x080037d4
 8002650:	080038a4 	.word	0x080038a4
 8002654:	080037b8 	.word	0x080037b8
 8002658:	1fffc830 	.word	0x1fffc830
 800265c:	080037e8 	.word	0x080037e8
 8002660:	080037fc 	.word	0x080037fc
 8002664:	08003810 	.word	0x08003810
 8002668:	08003824 	.word	0x08003824
 800266c:	08003838 	.word	0x08003838
 8002670:	1fffc808 	.word	0x1fffc808
 8002674:	080037bc 	.word	0x080037bc

08002678 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	2201      	movs	r2, #1
 8002688:	409a      	lsls	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	605a      	str	r2, [r3, #4]
}
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026aa:	409a      	lsls	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	605a      	str	r2, [r3, #4]
}
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop

080026bc <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80026ce:	409a      	lsls	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	605a      	str	r2, [r3, #4]
}
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	f003 0301 	and.w	r3, r3, #1
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop

08002708 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7c1b      	ldrb	r3, [r3, #16]
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7ff ffac 	bl	8002678 <XMC_GPIO_SetOutputHigh>
}
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop

08002728 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7c1b      	ldrb	r3, [r3, #16]
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7ff ffac 	bl	8002698 <XMC_GPIO_SetOutputLow>
}
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop

08002748 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7c1b      	ldrb	r3, [r3, #16]
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7ff ffae 	bl	80026bc <XMC_GPIO_ToggleOutput>
}
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop

08002768 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7c1b      	ldrb	r3, [r3, #16]
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f7ff ffb0 	bl	80026e0 <XMC_GPIO_GetInput>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop

0800278c <CAN0_1_IRQHandler>:
int MoveWindow(int percentage);
int CheckTopLimitSwitch();
int CheckBottomLimitSwitch();
void ManualOverrideSwitches();

void React_Node_Handler() {
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
	/* Check for Node error */
	uint32_t status;
	if(CAN_NODE_GetStatus(&React_Node) & XMC_CAN_NODE_STATUS_LAST_ERROR_CODE)
 8002792:	4854      	ldr	r0, [pc, #336]	; (80028e4 <CAN0_1_IRQHandler+0x158>)
 8002794:	f7ff fe32 	bl	80023fc <CAN_NODE_GetStatus>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f040 809d 	bne.w	80028de <CAN0_1_IRQHandler+0x152>
	{}
	else if(CAN_NODE_MO_GetStatus(&React_Node_LMO_01_Config) & XMC_CAN_MO_STATUS_RX_PENDING)
 80027a4:	4850      	ldr	r0, [pc, #320]	; (80028e8 <CAN0_1_IRQHandler+0x15c>)
 80027a6:	f7ff fe19 	bl	80023dc <CAN_NODE_MO_GetStatus>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8094 	beq.w	80028de <CAN0_1_IRQHandler+0x152>
	{
		/* Read the received Message object and stores in Request_Node_LMO_02_Config*/
		CAN_NODE_MO_Receive(&React_Node_LMO_01_Config);
 80027b6:	484c      	ldr	r0, [pc, #304]	; (80028e8 <CAN0_1_IRQHandler+0x15c>)
 80027b8:	f7ff fdfe 	bl	80023b8 <CAN_NODE_MO_Receive>
		int requestedID = React_Node_LMO_01_Config.mo_ptr->can_data_word[0];	//grab 0th byte
 80027bc:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <CAN0_1_IRQHandler+0x15c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	8a1b      	ldrh	r3, [r3, #16]
 80027c2:	617b      	str	r3, [r7, #20]

		if(requestedID == MOTOR_MODULE_ID)		//Check if ID requested is equal to this motor module
 80027c4:	4b49      	ldr	r3, [pc, #292]	; (80028ec <CAN0_1_IRQHandler+0x160>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	f040 8087 	bne.w	80028de <CAN0_1_IRQHandler+0x152>
		{
			int requestedCommand = React_Node_LMO_01_Config.mo_ptr->can_data_word[1];	//grab 1st byte
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <CAN0_1_IRQHandler+0x15c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	8a5b      	ldrh	r3, [r3, #18]
 80027d6:	613b      	str	r3, [r7, #16]
			DIGITAL_IO_ToggleOutput(&LED_Indicator);
 80027d8:	4845      	ldr	r0, [pc, #276]	; (80028f0 <CAN0_1_IRQHandler+0x164>)
 80027da:	f7ff ffb5 	bl	8002748 <DIGITAL_IO_ToggleOutput>
			if(requestedCommand == 752)		//operate window
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
 80027e4:	d14e      	bne.n	8002884 <CAN0_1_IRQHandler+0xf8>
			{
				int requestedPercentage = React_Node_LMO_01_Config.mo_ptr->can_data_word[2];	//grab 2nd byte
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <CAN0_1_IRQHandler+0x15c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	8a9b      	ldrh	r3, [r3, #20]
 80027ec:	60fb      	str	r3, [r7, #12]
				requestedPercentage = (requestedPercentage / 10);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a40      	ldr	r2, [pc, #256]	; (80028f4 <CAN0_1_IRQHandler+0x168>)
 80027f2:	fb82 1203 	smull	r1, r2, r2, r3
 80027f6:	1092      	asrs	r2, r2, #2
 80027f8:	17db      	asrs	r3, r3, #31
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	60fb      	str	r3, [r7, #12]
				int windowMovementStatus = MoveWindow(requestedPercentage);
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f9fe 	bl	8002c00 <MoveWindow>
 8002804:	60b8      	str	r0, [r7, #8]
				if(windowMovementStatus == 0)		//Failed Command, either something weird happened or MOS is doing its thing
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d11a      	bne.n	8002842 <CAN0_1_IRQHandler+0xb6>
				{
					React_Node_LMO_02_Config.mo_ptr->can_data_word[0] = MOTOR_MODULE_ID;
 800280c:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a36      	ldr	r2, [pc, #216]	; (80028ec <CAN0_1_IRQHandler+0x160>)
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	b292      	uxth	r2, r2
 8002816:	821a      	strh	r2, [r3, #16]
					React_Node_LMO_02_Config.mo_ptr->can_data_word[1] = 0x02;
 8002818:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2202      	movs	r2, #2
 800281e:	825a      	strh	r2, [r3, #18]
					React_Node_LMO_02_Config.mo_ptr->can_data_word[2] = 1;	//Failed Command
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2201      	movs	r2, #1
 8002826:	829a      	strh	r2, [r3, #20]
					status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(React_Node_LMO_02_Config.mo_ptr);
 8002828:	4b33      	ldr	r3, [pc, #204]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fccf 	bl	80011d0 <XMC_CAN_MO_UpdateData>
 8002832:	4603      	mov	r3, r0
 8002834:	607b      	str	r3, [r7, #4]
					status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
 8002836:	4830      	ldr	r0, [pc, #192]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 8002838:	f7ff fdac 	bl	8002394 <CAN_NODE_MO_Transmit>
 800283c:	4603      	mov	r3, r0
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	e01f      	b.n	8002882 <CAN0_1_IRQHandler+0xf6>
				}
				else if(windowMovementStatus == 1)	//Successful Command :)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d11c      	bne.n	8002882 <CAN0_1_IRQHandler+0xf6>
				{
					React_Node_LMO_02_Config.mo_ptr->can_data_word[0] = MOTOR_MODULE_ID;
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a27      	ldr	r2, [pc, #156]	; (80028ec <CAN0_1_IRQHandler+0x160>)
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	b292      	uxth	r2, r2
 8002852:	821a      	strh	r2, [r3, #16]
					React_Node_LMO_02_Config.mo_ptr->can_data_word[1] = 0x04;
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2204      	movs	r2, #4
 800285a:	825a      	strh	r2, [r3, #18]
					React_Node_LMO_02_Config.mo_ptr->can_data_word[2] = WindowState;	//Successful Command
 800285c:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a26      	ldr	r2, [pc, #152]	; (80028fc <CAN0_1_IRQHandler+0x170>)
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	b292      	uxth	r2, r2
 8002866:	829a      	strh	r2, [r3, #20]
					status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(React_Node_LMO_02_Config.mo_ptr);
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fcaf 	bl	80011d0 <XMC_CAN_MO_UpdateData>
 8002872:	4603      	mov	r3, r0
 8002874:	607b      	str	r3, [r7, #4]
					status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
 8002876:	4820      	ldr	r0, [pc, #128]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 8002878:	f7ff fd8c 	bl	8002394 <CAN_NODE_MO_Transmit>
 800287c:	4603      	mov	r3, r0
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	e02d      	b.n	80028de <CAN0_1_IRQHandler+0x152>
 8002882:	e02c      	b.n	80028de <CAN0_1_IRQHandler+0x152>
				}
			}
			else if(requestedCommand == 0x02)	//Acknowledgment to our registration
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d103      	bne.n	8002892 <CAN0_1_IRQHandler+0x106>
			{
				isRegistered = 1;
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <CAN0_1_IRQHandler+0x174>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e025      	b.n	80028de <CAN0_1_IRQHandler+0x152>
			}
			else if(requestedCommand == 996)	//state request
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 8002898:	d121      	bne.n	80028de <CAN0_1_IRQHandler+0x152>
			{
				int WindowStatePercentage = (WindowState * 10);
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <CAN0_1_IRQHandler+0x170>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	603b      	str	r3, [r7, #0]

				React_Node_LMO_02_Config.mo_ptr->can_data_word[0] = MOTOR_MODULE_ID;
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <CAN0_1_IRQHandler+0x160>)
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	b292      	uxth	r2, r2
 80028b2:	821a      	strh	r2, [r3, #16]
				React_Node_LMO_02_Config.mo_ptr->can_data_word[1] = 0x04;	//Status update
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2204      	movs	r2, #4
 80028ba:	825a      	strh	r2, [r3, #18]
				React_Node_LMO_02_Config.mo_ptr->can_data_word[2] = WindowStatePercentage;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	b292      	uxth	r2, r2
 80028c4:	829a      	strh	r2, [r3, #20]
				status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(React_Node_LMO_02_Config.mo_ptr);
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fc80 	bl	80011d0 <XMC_CAN_MO_UpdateData>
 80028d0:	4603      	mov	r3, r0
 80028d2:	607b      	str	r3, [r7, #4]
				status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
 80028d4:	4808      	ldr	r0, [pc, #32]	; (80028f8 <CAN0_1_IRQHandler+0x16c>)
 80028d6:	f7ff fd5d 	bl	8002394 <CAN_NODE_MO_Transmit>
 80028da:	4603      	mov	r3, r0
 80028dc:	607b      	str	r3, [r7, #4]
			}
		}
	}
}
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	080038a4 	.word	0x080038a4
 80028e8:	0800388c 	.word	0x0800388c
 80028ec:	1fffc8d8 	.word	0x1fffc8d8
 80028f0:	080037c0 	.word	0x080037c0
 80028f4:	66666667 	.word	0x66666667
 80028f8:	08003898 	.word	0x08003898
 80028fc:	1fffc8ec 	.word	0x1fffc8ec
 8002900:	1fffc8e0 	.word	0x1fffc8e0

08002904 <CCU41_1_IRQHandler>:

void TimerHandler()
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	time++;
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <CCU41_1_IRQHandler+0x18>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	4a03      	ldr	r2, [pc, #12]	; (800291c <CCU41_1_IRQHandler+0x18>)
 8002910:	6013      	str	r3, [r2, #0]
}
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	1fffc8e8 	.word	0x1fffc8e8

08002920 <main>:

int main(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0

  DAVE_Init();		/* Initialization of DAVE APPs  */
 8002924:	f7ff fe1e 	bl	8002564 <DAVE_Init>

  // Startup functions
  RegisterDevice();
 8002928:	f000 f806 	bl	8002938 <RegisterDevice>
  HomeWindow();
 800292c:	f000 f824 	bl	8002978 <HomeWindow>
//  MoveWindow(5);	// 50%
//  MoveWindow(0);	//0%

  while(1U)
  {
	  ManualOverrideSwitches();
 8002930:	f000 fa34 	bl	8002d9c <ManualOverrideSwitches>
  }
 8002934:	e7fc      	b.n	8002930 <main+0x10>
 8002936:	bf00      	nop

08002938 <RegisterDevice>:
  return 0;
}

// Sends message to NMC on startup to register device
void RegisterDevice()
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
	React_Node_LMO_02_Config.mo_ptr->can_data_word[0] = MOTOR_MODULE_ID;
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <RegisterDevice+0x38>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <RegisterDevice+0x3c>)
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	b292      	uxth	r2, r2
 8002948:	821a      	strh	r2, [r3, #16]
	React_Node_LMO_02_Config.mo_ptr->can_data_word[1] = 0x05;	//device registration
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <RegisterDevice+0x38>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2205      	movs	r2, #5
 8002950:	825a      	strh	r2, [r3, #18]
	uint32_t status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(React_Node_LMO_02_Config.mo_ptr);
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <RegisterDevice+0x38>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fc3a 	bl	80011d0 <XMC_CAN_MO_UpdateData>
 800295c:	4603      	mov	r3, r0
 800295e:	607b      	str	r3, [r7, #4]
	status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <RegisterDevice+0x38>)
 8002962:	f7ff fd17 	bl	8002394 <CAN_NODE_MO_Transmit>
 8002966:	4603      	mov	r3, r0
 8002968:	607b      	str	r3, [r7, #4]

	//TODO : Add delay until registered, retransmit after delay if not

}
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	08003898 	.word	0x08003898
 8002974:	1fffc8d8 	.word	0x1fffc8d8

08002978 <HomeWindow>:

//Homes the motor to acquire constants needed for operation. Also for tuning
int HomeWindow()
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
	int BottomLimitSwitchState = CheckBottomLimitSwitch();
 800297e:	f000 f9ef 	bl	8002d60 <CheckBottomLimitSwitch>
 8002982:	6078      	str	r0, [r7, #4]

	if (BottomLimitSwitchState == 1)		// TODO : Change to 0 bc 0 means button pressed
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d127      	bne.n	80029da <HomeWindow+0x62>
	{
		TIMER_Start(&TIMER_Motor);
 800298a:	4895      	ldr	r0, [pc, #596]	; (8002be0 <HomeWindow+0x268>)
 800298c:	f7fe ff3e 	bl	800180c <TIMER_Start>
		while(CheckTopLimitSwitch() == 1)	//drive motor until top limit switch is reached
 8002990:	e005      	b.n	800299e <HomeWindow+0x26>
		{
			PWM_Start(&PWM_Motor);
 8002992:	4894      	ldr	r0, [pc, #592]	; (8002be4 <HomeWindow+0x26c>)
 8002994:	f7ff f970 	bl	8001c78 <PWM_Start>
			DIGITAL_IO_SetOutputLow(&Motor_Direction); //Move up
 8002998:	4893      	ldr	r0, [pc, #588]	; (8002be8 <HomeWindow+0x270>)
 800299a:	f7ff fec5 	bl	8002728 <DIGITAL_IO_SetOutputLow>
	int BottomLimitSwitchState = CheckBottomLimitSwitch();

	if (BottomLimitSwitchState == 1)		// TODO : Change to 0 bc 0 means button pressed
	{
		TIMER_Start(&TIMER_Motor);
		while(CheckTopLimitSwitch() == 1)	//drive motor until top limit switch is reached
 800299e:	f000 f9c1 	bl	8002d24 <CheckTopLimitSwitch>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d0f4      	beq.n	8002992 <HomeWindow+0x1a>
		{
			PWM_Start(&PWM_Motor);
			DIGITAL_IO_SetOutputLow(&Motor_Direction); //Move up
		}
		PWM_Stop(&PWM_Motor);
 80029a8:	488e      	ldr	r0, [pc, #568]	; (8002be4 <HomeWindow+0x26c>)
 80029aa:	f7ff f975 	bl	8001c98 <PWM_Stop>
		TIMER_Stop(&TIMER_Motor);
 80029ae:	488c      	ldr	r0, [pc, #560]	; (8002be0 <HomeWindow+0x268>)
 80029b0:	f7fe ff4a 	bl	8001848 <TIMER_Stop>
		closedToOpenTime = time;
 80029b4:	4b8d      	ldr	r3, [pc, #564]	; (8002bec <HomeWindow+0x274>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a8d      	ldr	r2, [pc, #564]	; (8002bf0 <HomeWindow+0x278>)
 80029ba:	6013      	str	r3, [r2, #0]
		while(CheckBottomLimitSwitch() == 1)
 80029bc:	e005      	b.n	80029ca <HomeWindow+0x52>
		{
			PWM_Start(&PWM_Motor);
 80029be:	4889      	ldr	r0, [pc, #548]	; (8002be4 <HomeWindow+0x26c>)
 80029c0:	f7ff f95a 	bl	8001c78 <PWM_Start>
			DIGITAL_IO_SetOutputHigh(&Motor_Direction);
 80029c4:	4888      	ldr	r0, [pc, #544]	; (8002be8 <HomeWindow+0x270>)
 80029c6:	f7ff fe9f 	bl	8002708 <DIGITAL_IO_SetOutputHigh>
			DIGITAL_IO_SetOutputLow(&Motor_Direction); //Move up
		}
		PWM_Stop(&PWM_Motor);
		TIMER_Stop(&TIMER_Motor);
		closedToOpenTime = time;
		while(CheckBottomLimitSwitch() == 1)
 80029ca:	f000 f9c9 	bl	8002d60 <CheckBottomLimitSwitch>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d0f4      	beq.n	80029be <HomeWindow+0x46>
		{
			PWM_Start(&PWM_Motor);
			DIGITAL_IO_SetOutputHigh(&Motor_Direction);
		}
		PWM_Stop(&PWM_Motor);	//Turn off PWM once bottom reached
 80029d4:	4883      	ldr	r0, [pc, #524]	; (8002be4 <HomeWindow+0x26c>)
 80029d6:	f7ff f95f 	bl	8001c98 <PWM_Stop>
	}
	WindowState = 0;	// Set initial state to zero
 80029da:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <HomeWindow+0x27c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
	time = 0;			// reset global timer variable
 80029e0:	4b82      	ldr	r3, [pc, #520]	; (8002bec <HomeWindow+0x274>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
	// Create State table
	stateTimingVariables[0]  = 0;								//0%
 80029e6:	4b84      	ldr	r3, [pc, #528]	; (8002bf8 <HomeWindow+0x280>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
	stateTimingVariables[1]  = (closedToOpenTime * (0.1));		//10%
 80029ec:	4b80      	ldr	r3, [pc, #512]	; (8002bf0 <HomeWindow+0x278>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fc11 	bl	8003218 <__aeabi_i2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	a368      	add	r3, pc, #416	; (adr r3, 8002ba0 <HomeWindow+0x228>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f000 fc6e 	bl	80032e4 <__aeabi_dmul>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f000 fe7a 	bl	8003708 <__aeabi_d2iz>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b78      	ldr	r3, [pc, #480]	; (8002bf8 <HomeWindow+0x280>)
 8002a18:	605a      	str	r2, [r3, #4]
	stateTimingVariables[2]  = (closedToOpenTime * (0.2));		//20%
 8002a1a:	4b75      	ldr	r3, [pc, #468]	; (8002bf0 <HomeWindow+0x278>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fbfa 	bl	8003218 <__aeabi_i2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	a35e      	add	r3, pc, #376	; (adr r3, 8002ba8 <HomeWindow+0x230>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	f000 fc57 	bl	80032e4 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f000 fe63 	bl	8003708 <__aeabi_d2iz>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <HomeWindow+0x280>)
 8002a46:	609a      	str	r2, [r3, #8]
	stateTimingVariables[3]  = (closedToOpenTime * (0.3));		//30%
 8002a48:	4b69      	ldr	r3, [pc, #420]	; (8002bf0 <HomeWindow+0x278>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fbe3 	bl	8003218 <__aeabi_i2d>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	a355      	add	r3, pc, #340	; (adr r3, 8002bb0 <HomeWindow+0x238>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f000 fc40 	bl	80032e4 <__aeabi_dmul>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f000 fe4c 	bl	8003708 <__aeabi_d2iz>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HomeWindow+0x280>)
 8002a74:	60da      	str	r2, [r3, #12]
	stateTimingVariables[4]  = (closedToOpenTime * (0.4));		//40%
 8002a76:	4b5e      	ldr	r3, [pc, #376]	; (8002bf0 <HomeWindow+0x278>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fbcc 	bl	8003218 <__aeabi_i2d>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	a34b      	add	r3, pc, #300	; (adr r3, 8002bb8 <HomeWindow+0x240>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f000 fc29 	bl	80032e4 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f000 fe35 	bl	8003708 <__aeabi_d2iz>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b55      	ldr	r3, [pc, #340]	; (8002bf8 <HomeWindow+0x280>)
 8002aa2:	611a      	str	r2, [r3, #16]
	stateTimingVariables[5]  = (closedToOpenTime * (0.5));		//50%
 8002aa4:	4b52      	ldr	r3, [pc, #328]	; (8002bf0 <HomeWindow+0x278>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fbb5 	bl	8003218 <__aeabi_i2d>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HomeWindow+0x284>)
 8002abc:	f000 fc12 	bl	80032e4 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f000 fe1e 	bl	8003708 <__aeabi_d2iz>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HomeWindow+0x280>)
 8002ad0:	615a      	str	r2, [r3, #20]
	stateTimingVariables[6]  = (closedToOpenTime * (0.6));		//60%
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HomeWindow+0x278>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fb9e 	bl	8003218 <__aeabi_i2d>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	a336      	add	r3, pc, #216	; (adr r3, 8002bc0 <HomeWindow+0x248>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f000 fbfb 	bl	80032e4 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f000 fe07 	bl	8003708 <__aeabi_d2iz>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <HomeWindow+0x280>)
 8002afe:	619a      	str	r2, [r3, #24]
	stateTimingVariables[7]  = (closedToOpenTime * (0.7));		//70%
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HomeWindow+0x278>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fb87 	bl	8003218 <__aeabi_i2d>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	a32d      	add	r3, pc, #180	; (adr r3, 8002bc8 <HomeWindow+0x250>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	f000 fbe4 	bl	80032e4 <__aeabi_dmul>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	f000 fdf0 	bl	8003708 <__aeabi_d2iz>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HomeWindow+0x280>)
 8002b2c:	61da      	str	r2, [r3, #28]
	stateTimingVariables[8]  = (closedToOpenTime * (0.8));		//80%
 8002b2e:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HomeWindow+0x278>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fb70 	bl	8003218 <__aeabi_i2d>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	a323      	add	r3, pc, #140	; (adr r3, 8002bd0 <HomeWindow+0x258>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f000 fbcd 	bl	80032e4 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	f000 fdd9 	bl	8003708 <__aeabi_d2iz>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <HomeWindow+0x280>)
 8002b5a:	621a      	str	r2, [r3, #32]
	stateTimingVariables[9]  = (closedToOpenTime * (0.9));		//90%
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HomeWindow+0x278>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fb59 	bl	8003218 <__aeabi_i2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	a31a      	add	r3, pc, #104	; (adr r3, 8002bd8 <HomeWindow+0x260>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f000 fbb6 	bl	80032e4 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f000 fdc2 	bl	8003708 <__aeabi_d2iz>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <HomeWindow+0x280>)
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
	stateTimingVariables[10] = (closedToOpenTime);		        //100%
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HomeWindow+0x278>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <HomeWindow+0x280>)
 8002b90:	6293      	str	r3, [r2, #40]	; 0x28
	return 1;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	f3af 8000 	nop.w
 8002ba0:	9999999a 	.word	0x9999999a
 8002ba4:	3fb99999 	.word	0x3fb99999
 8002ba8:	9999999a 	.word	0x9999999a
 8002bac:	3fc99999 	.word	0x3fc99999
 8002bb0:	33333333 	.word	0x33333333
 8002bb4:	3fd33333 	.word	0x3fd33333
 8002bb8:	9999999a 	.word	0x9999999a
 8002bbc:	3fd99999 	.word	0x3fd99999
 8002bc0:	33333333 	.word	0x33333333
 8002bc4:	3fe33333 	.word	0x3fe33333
 8002bc8:	66666666 	.word	0x66666666
 8002bcc:	3fe66666 	.word	0x3fe66666
 8002bd0:	9999999a 	.word	0x9999999a
 8002bd4:	3fe99999 	.word	0x3fe99999
 8002bd8:	cccccccd 	.word	0xcccccccd
 8002bdc:	3feccccc 	.word	0x3feccccc
 8002be0:	1fffc808 	.word	0x1fffc808
 8002be4:	1fffc830 	.word	0x1fffc830
 8002be8:	08003838 	.word	0x08003838
 8002bec:	1fffc8e8 	.word	0x1fffc8e8
 8002bf0:	1fffc8e4 	.word	0x1fffc8e4
 8002bf4:	1fffc8ec 	.word	0x1fffc8ec
 8002bf8:	1fffc8f0 	.word	0x1fffc8f0
 8002bfc:	3fe00000 	.word	0x3fe00000

08002c00 <MoveWindow>:

//Function to move window to desired percentage
// NOTE: HIGH = DOWM; LOW = UP !!!
int MoveWindow(int percentage)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	 - drive motor and update timer variable with timer interrupt until motor has been driven appropriately
	 - stop timer and update current state variable
	 - return with success and smile :)
	*/

	int MOS_UP_State = DIGITAL_IO_GetInput(&MOS_UP);
 8002c08:	483e      	ldr	r0, [pc, #248]	; (8002d04 <MoveWindow+0x104>)
 8002c0a:	f7ff fdad 	bl	8002768 <DIGITAL_IO_GetInput>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	617b      	str	r3, [r7, #20]
	int MOS_DOWN_State = DIGITAL_IO_GetInput(&MOS_DOWN);
 8002c12:	483d      	ldr	r0, [pc, #244]	; (8002d08 <MoveWindow+0x108>)
 8002c14:	f7ff fda8 	bl	8002768 <DIGITAL_IO_GetInput>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	613b      	str	r3, [r7, #16]
	if ((MOS_UP_State == 0) || (MOS_DOWN_State == 0))
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <MoveWindow+0x28>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <MoveWindow+0x2c>
	{
		return 0;	//Manual Override switch already being serviced
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e067      	b.n	8002cfc <MoveWindow+0xfc>
	}

	int requestedPercentage = percentage;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]
	if ((requestedPercentage < 0) || (requestedPercentage > 10))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db02      	blt.n	8002c3c <MoveWindow+0x3c>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b0a      	cmp	r3, #10
 8002c3a:	dd01      	ble.n	8002c40 <MoveWindow+0x40>
	{
		return 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e05d      	b.n	8002cfc <MoveWindow+0xfc>
	}

	int timeToMove = (stateTimingVariables[requestedPercentage] - stateTimingVariables[WindowState]);		// Subtract current state (time) to requested state.
 8002c40:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <MoveWindow+0x10c>)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <MoveWindow+0x110>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	492f      	ldr	r1, [pc, #188]	; (8002d0c <MoveWindow+0x10c>)
 8002c4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	60bb      	str	r3, [r7, #8]
																										// Difference will be time needed to drive motor,
																										// sign will be direction (+ = up, - = down)
	if (timeToMove > 0)			// Positive, so need to drive up
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dd20      	ble.n	8002c9e <MoveWindow+0x9e>
	{
		TIMER_Start(&TIMER_Motor);
 8002c5c:	482d      	ldr	r0, [pc, #180]	; (8002d14 <MoveWindow+0x114>)
 8002c5e:	f7fe fdd5 	bl	800180c <TIMER_Start>
		while((time < timeToMove) && (CheckTopLimitSwitch() == 1))	//drive motor until time is equal to state
 8002c62:	e005      	b.n	8002c70 <MoveWindow+0x70>
		{
			PWM_Start(&PWM_Motor);
 8002c64:	482c      	ldr	r0, [pc, #176]	; (8002d18 <MoveWindow+0x118>)
 8002c66:	f7ff f807 	bl	8001c78 <PWM_Start>
			DIGITAL_IO_SetOutputLow(&Motor_Direction); //Move up
 8002c6a:	482c      	ldr	r0, [pc, #176]	; (8002d1c <MoveWindow+0x11c>)
 8002c6c:	f7ff fd5c 	bl	8002728 <DIGITAL_IO_SetOutputLow>
																										// Difference will be time needed to drive motor,
																										// sign will be direction (+ = up, - = down)
	if (timeToMove > 0)			// Positive, so need to drive up
	{
		TIMER_Start(&TIMER_Motor);
		while((time < timeToMove) && (CheckTopLimitSwitch() == 1))	//drive motor until time is equal to state
 8002c70:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <MoveWindow+0x120>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	da04      	bge.n	8002c84 <MoveWindow+0x84>
 8002c7a:	f000 f853 	bl	8002d24 <CheckTopLimitSwitch>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d0ef      	beq.n	8002c64 <MoveWindow+0x64>
		{
			PWM_Start(&PWM_Motor);
			DIGITAL_IO_SetOutputLow(&Motor_Direction); //Move up
		}
		PWM_Stop(&PWM_Motor);
 8002c84:	4824      	ldr	r0, [pc, #144]	; (8002d18 <MoveWindow+0x118>)
 8002c86:	f7ff f807 	bl	8001c98 <PWM_Stop>
		TIMER_Stop(&TIMER_Motor);
 8002c8a:	4822      	ldr	r0, [pc, #136]	; (8002d14 <MoveWindow+0x114>)
 8002c8c:	f7fe fddc 	bl	8001848 <TIMER_Stop>
		time = 0;
 8002c90:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <MoveWindow+0x120>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
		WindowState = requestedPercentage;
 8002c96:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <MoveWindow+0x110>)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e02d      	b.n	8002cfa <MoveWindow+0xfa>
	}
	else if (timeToMove < 0)	// Negative, need to drive down
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da25      	bge.n	8002cf0 <MoveWindow+0xf0>
	{
		timeToMove = abs(timeToMove);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bfb8      	it	lt
 8002caa:	425b      	neglt	r3, r3
 8002cac:	60bb      	str	r3, [r7, #8]
		TIMER_Start(&TIMER_Motor);
 8002cae:	4819      	ldr	r0, [pc, #100]	; (8002d14 <MoveWindow+0x114>)
 8002cb0:	f7fe fdac 	bl	800180c <TIMER_Start>
		while((time < timeToMove) && (CheckBottomLimitSwitch() == 1))	//drive motor until time is equal to state
 8002cb4:	e005      	b.n	8002cc2 <MoveWindow+0xc2>
		{
			PWM_Start(&PWM_Motor);
 8002cb6:	4818      	ldr	r0, [pc, #96]	; (8002d18 <MoveWindow+0x118>)
 8002cb8:	f7fe ffde 	bl	8001c78 <PWM_Start>
			DIGITAL_IO_SetOutputHigh(&Motor_Direction); //Move down
 8002cbc:	4817      	ldr	r0, [pc, #92]	; (8002d1c <MoveWindow+0x11c>)
 8002cbe:	f7ff fd23 	bl	8002708 <DIGITAL_IO_SetOutputHigh>
	}
	else if (timeToMove < 0)	// Negative, need to drive down
	{
		timeToMove = abs(timeToMove);
		TIMER_Start(&TIMER_Motor);
		while((time < timeToMove) && (CheckBottomLimitSwitch() == 1))	//drive motor until time is equal to state
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <MoveWindow+0x120>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	da04      	bge.n	8002cd6 <MoveWindow+0xd6>
 8002ccc:	f000 f848 	bl	8002d60 <CheckBottomLimitSwitch>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d0ef      	beq.n	8002cb6 <MoveWindow+0xb6>
		{
			PWM_Start(&PWM_Motor);
			DIGITAL_IO_SetOutputHigh(&Motor_Direction); //Move down
		}
		PWM_Stop(&PWM_Motor);
 8002cd6:	4810      	ldr	r0, [pc, #64]	; (8002d18 <MoveWindow+0x118>)
 8002cd8:	f7fe ffde 	bl	8001c98 <PWM_Stop>
		TIMER_Stop(&TIMER_Motor);
 8002cdc:	480d      	ldr	r0, [pc, #52]	; (8002d14 <MoveWindow+0x114>)
 8002cde:	f7fe fdb3 	bl	8001848 <TIMER_Stop>
		time = 0;
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <MoveWindow+0x120>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
		WindowState = requestedPercentage;
 8002ce8:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <MoveWindow+0x110>)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e004      	b.n	8002cfa <MoveWindow+0xfa>
	}
	else if (timeToMove == 0)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MoveWindow+0xfa>
	{
		// Requesting same state, so do nothing
	}
	else
	{
		return 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e000      	b.n	8002cfc <MoveWindow+0xfc>
	}
	return 1;
 8002cfa:	2301      	movs	r3, #1
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	08003824 	.word	0x08003824
 8002d08:	08003810 	.word	0x08003810
 8002d0c:	1fffc8f0 	.word	0x1fffc8f0
 8002d10:	1fffc8ec 	.word	0x1fffc8ec
 8002d14:	1fffc808 	.word	0x1fffc808
 8002d18:	1fffc830 	.word	0x1fffc830
 8002d1c:	08003838 	.word	0x08003838
 8002d20:	1fffc8e8 	.word	0x1fffc8e8

08002d24 <CheckTopLimitSwitch>:

int CheckTopLimitSwitch()
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
	int TopSwitchState = DIGITAL_IO_GetInput(&LIMIT_SWITCH_TOP);
 8002d2a:	480a      	ldr	r0, [pc, #40]	; (8002d54 <CheckTopLimitSwitch+0x30>)
 8002d2c:	f7ff fd1c 	bl	8002768 <DIGITAL_IO_GetInput>
 8002d30:	4603      	mov	r3, r0
 8002d32:	607b      	str	r3, [r7, #4]
	if (TopSwitchState != top_button_state)
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <CheckTopLimitSwitch+0x34>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d004      	beq.n	8002d48 <CheckTopLimitSwitch+0x24>
	{
		DIGITAL_IO_SetOutputHigh(&LED_Indicator);
 8002d3e:	4807      	ldr	r0, [pc, #28]	; (8002d5c <CheckTopLimitSwitch+0x38>)
 8002d40:	f7ff fce2 	bl	8002708 <DIGITAL_IO_SetOutputHigh>
		return 0;	//Top switch pressed
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <CheckTopLimitSwitch+0x26>
	}

	return 1; 	//Base case that neither is pressed
 8002d48:	2301      	movs	r3, #1
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	080037fc 	.word	0x080037fc
 8002d58:	1fffc8d0 	.word	0x1fffc8d0
 8002d5c:	080037c0 	.word	0x080037c0

08002d60 <CheckBottomLimitSwitch>:
int CheckBottomLimitSwitch()
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
	int BottomSwitchState = DIGITAL_IO_GetInput(&LIMIT_SWITCH_BOTTOM);
 8002d66:	480a      	ldr	r0, [pc, #40]	; (8002d90 <CheckBottomLimitSwitch+0x30>)
 8002d68:	f7ff fcfe 	bl	8002768 <DIGITAL_IO_GetInput>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	607b      	str	r3, [r7, #4]
	if (BottomSwitchState != bottom_button_state)
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <CheckBottomLimitSwitch+0x34>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d004      	beq.n	8002d84 <CheckBottomLimitSwitch+0x24>
	{
		DIGITAL_IO_SetOutputLow(&LED_Indicator);
 8002d7a:	4807      	ldr	r0, [pc, #28]	; (8002d98 <CheckBottomLimitSwitch+0x38>)
 8002d7c:	f7ff fcd4 	bl	8002728 <DIGITAL_IO_SetOutputLow>
		return 0; 	//Bottom switch pressed
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <CheckBottomLimitSwitch+0x26>
	}

	return 1; 	//Base case that neither is pressed
 8002d84:	2301      	movs	r3, #1
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	080037e8 	.word	0x080037e8
 8002d94:	1fffc8d4 	.word	0x1fffc8d4
 8002d98:	080037c0 	.word	0x080037c0

08002d9c <ManualOverrideSwitches>:

void ManualOverrideSwitches()
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
	int MOS_UP_State = DIGITAL_IO_GetInput(&MOS_UP);
 8002da2:	486a      	ldr	r0, [pc, #424]	; (8002f4c <ManualOverrideSwitches+0x1b0>)
 8002da4:	f7ff fce0 	bl	8002768 <DIGITAL_IO_GetInput>
 8002da8:	4603      	mov	r3, r0
 8002daa:	617b      	str	r3, [r7, #20]
	int MOS_DOWN_State = DIGITAL_IO_GetInput(&MOS_DOWN);
 8002dac:	4868      	ldr	r0, [pc, #416]	; (8002f50 <ManualOverrideSwitches+0x1b4>)
 8002dae:	f7ff fcdb 	bl	8002768 <DIGITAL_IO_GetInput>
 8002db2:	4603      	mov	r3, r0
 8002db4:	613b      	str	r3, [r7, #16]
	int nextState;
	uint32_t status;
	if (MOS_UP_State == 0)			// Up button is pressed, upward movement requested
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d15e      	bne.n	8002e7a <ManualOverrideSwitches+0xde>
	{
		while ((MOS_UP_State == 0) && (WindowState != 10))
 8002dbc:	e033      	b.n	8002e26 <ManualOverrideSwitches+0x8a>
		{
			nextState = (stateTimingVariables[WindowState + 1] - stateTimingVariables[WindowState]);	//calculate next state up
 8002dbe:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4a64      	ldr	r2, [pc, #400]	; (8002f58 <ManualOverrideSwitches+0x1bc>)
 8002dc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dca:	4b62      	ldr	r3, [pc, #392]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4962      	ldr	r1, [pc, #392]	; (8002f58 <ManualOverrideSwitches+0x1bc>)
 8002dd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	60fb      	str	r3, [r7, #12]
			TIMER_Start(&TIMER_Motor);
 8002dd8:	4860      	ldr	r0, [pc, #384]	; (8002f5c <ManualOverrideSwitches+0x1c0>)
 8002dda:	f7fe fd17 	bl	800180c <TIMER_Start>
			while ((time < nextState) && (CheckTopLimitSwitch() == 1))		//drive motor up to next state, then check again if button is pressed
 8002dde:	e005      	b.n	8002dec <ManualOverrideSwitches+0x50>
			{
				PWM_Start(&PWM_Motor);
 8002de0:	485f      	ldr	r0, [pc, #380]	; (8002f60 <ManualOverrideSwitches+0x1c4>)
 8002de2:	f7fe ff49 	bl	8001c78 <PWM_Start>
				DIGITAL_IO_SetOutputLow(&Motor_Direction); //Move up
 8002de6:	485f      	ldr	r0, [pc, #380]	; (8002f64 <ManualOverrideSwitches+0x1c8>)
 8002de8:	f7ff fc9e 	bl	8002728 <DIGITAL_IO_SetOutputLow>
	{
		while ((MOS_UP_State == 0) && (WindowState != 10))
		{
			nextState = (stateTimingVariables[WindowState + 1] - stateTimingVariables[WindowState]);	//calculate next state up
			TIMER_Start(&TIMER_Motor);
			while ((time < nextState) && (CheckTopLimitSwitch() == 1))		//drive motor up to next state, then check again if button is pressed
 8002dec:	4b5e      	ldr	r3, [pc, #376]	; (8002f68 <ManualOverrideSwitches+0x1cc>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	da04      	bge.n	8002e00 <ManualOverrideSwitches+0x64>
 8002df6:	f7ff ff95 	bl	8002d24 <CheckTopLimitSwitch>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d0ef      	beq.n	8002de0 <ManualOverrideSwitches+0x44>
			{
				PWM_Start(&PWM_Motor);
				DIGITAL_IO_SetOutputLow(&Motor_Direction); //Move up
			}
			PWM_Stop(&PWM_Motor);
 8002e00:	4857      	ldr	r0, [pc, #348]	; (8002f60 <ManualOverrideSwitches+0x1c4>)
 8002e02:	f7fe ff49 	bl	8001c98 <PWM_Stop>
			TIMER_Stop(&TIMER_Motor);
 8002e06:	4855      	ldr	r0, [pc, #340]	; (8002f5c <ManualOverrideSwitches+0x1c0>)
 8002e08:	f7fe fd1e 	bl	8001848 <TIMER_Stop>
			WindowState = WindowState + 1;
 8002e0c:	4b51      	ldr	r3, [pc, #324]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a50      	ldr	r2, [pc, #320]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002e14:	6013      	str	r3, [r2, #0]
			time = 0;
 8002e16:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <ManualOverrideSwitches+0x1cc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
			MOS_UP_State = DIGITAL_IO_GetInput(&MOS_UP);
 8002e1c:	484b      	ldr	r0, [pc, #300]	; (8002f4c <ManualOverrideSwitches+0x1b0>)
 8002e1e:	f7ff fca3 	bl	8002768 <DIGITAL_IO_GetInput>
 8002e22:	4603      	mov	r3, r0
 8002e24:	617b      	str	r3, [r7, #20]
	int MOS_DOWN_State = DIGITAL_IO_GetInput(&MOS_DOWN);
	int nextState;
	uint32_t status;
	if (MOS_UP_State == 0)			// Up button is pressed, upward movement requested
	{
		while ((MOS_UP_State == 0) && (WindowState != 10))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <ManualOverrideSwitches+0x98>
 8002e2c:	4b49      	ldr	r3, [pc, #292]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b0a      	cmp	r3, #10
 8002e32:	d1c4      	bne.n	8002dbe <ManualOverrideSwitches+0x22>
			TIMER_Stop(&TIMER_Motor);
			WindowState = WindowState + 1;
			time = 0;
			MOS_UP_State = DIGITAL_IO_GetInput(&MOS_UP);
		}
		int WindowStatePercentage = (WindowState * 10);
 8002e34:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
		React_Node_LMO_02_Config.mo_ptr->can_data_word[0] = MOTOR_MODULE_ID;
 8002e42:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a4a      	ldr	r2, [pc, #296]	; (8002f70 <ManualOverrideSwitches+0x1d4>)
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	821a      	strh	r2, [r3, #16]
		React_Node_LMO_02_Config.mo_ptr->can_data_word[1] = 0x04;	//Status update
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2204      	movs	r2, #4
 8002e54:	825a      	strh	r2, [r3, #18]
		React_Node_LMO_02_Config.mo_ptr->can_data_word[2] = WindowStatePercentage;
 8002e56:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	829a      	strh	r2, [r3, #20]
		status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(React_Node_LMO_02_Config.mo_ptr);
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe f9b3 	bl	80011d0 <XMC_CAN_MO_UpdateData>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	607b      	str	r3, [r7, #4]
		status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
 8002e6e:	483f      	ldr	r0, [pc, #252]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002e70:	f7ff fa90 	bl	8002394 <CAN_NODE_MO_Transmit>
 8002e74:	4603      	mov	r3, r0
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	e065      	b.n	8002f46 <ManualOverrideSwitches+0x1aa>
	}
	else if (MOS_DOWN_State == 0) 	// Down button pressed, downward movement requested
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d162      	bne.n	8002f46 <ManualOverrideSwitches+0x1aa>
	{
		while ((MOS_DOWN_State == 0) && (WindowState != 0))
 8002e80:	e038      	b.n	8002ef4 <ManualOverrideSwitches+0x158>
		{
			nextState = (stateTimingVariables[WindowState - 1] - stateTimingVariables[WindowState]);
 8002e82:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <ManualOverrideSwitches+0x1bc>)
 8002e8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4931      	ldr	r1, [pc, #196]	; (8002f58 <ManualOverrideSwitches+0x1bc>)
 8002e94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	60fb      	str	r3, [r7, #12]
			nextState = abs(nextState);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bfb8      	it	lt
 8002ea2:	425b      	neglt	r3, r3
 8002ea4:	60fb      	str	r3, [r7, #12]
			TIMER_Start(&TIMER_Motor);
 8002ea6:	482d      	ldr	r0, [pc, #180]	; (8002f5c <ManualOverrideSwitches+0x1c0>)
 8002ea8:	f7fe fcb0 	bl	800180c <TIMER_Start>
			while ((time < nextState) && (CheckBottomLimitSwitch() == 1))
 8002eac:	e005      	b.n	8002eba <ManualOverrideSwitches+0x11e>
			{
				PWM_Start(&PWM_Motor);
 8002eae:	482c      	ldr	r0, [pc, #176]	; (8002f60 <ManualOverrideSwitches+0x1c4>)
 8002eb0:	f7fe fee2 	bl	8001c78 <PWM_Start>
				DIGITAL_IO_SetOutputHigh(&Motor_Direction); //Move Down
 8002eb4:	482b      	ldr	r0, [pc, #172]	; (8002f64 <ManualOverrideSwitches+0x1c8>)
 8002eb6:	f7ff fc27 	bl	8002708 <DIGITAL_IO_SetOutputHigh>
		while ((MOS_DOWN_State == 0) && (WindowState != 0))
		{
			nextState = (stateTimingVariables[WindowState - 1] - stateTimingVariables[WindowState]);
			nextState = abs(nextState);
			TIMER_Start(&TIMER_Motor);
			while ((time < nextState) && (CheckBottomLimitSwitch() == 1))
 8002eba:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <ManualOverrideSwitches+0x1cc>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	da04      	bge.n	8002ece <ManualOverrideSwitches+0x132>
 8002ec4:	f7ff ff4c 	bl	8002d60 <CheckBottomLimitSwitch>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d0ef      	beq.n	8002eae <ManualOverrideSwitches+0x112>
			{
				PWM_Start(&PWM_Motor);
				DIGITAL_IO_SetOutputHigh(&Motor_Direction); //Move Down
			}
			PWM_Stop(&PWM_Motor);
 8002ece:	4824      	ldr	r0, [pc, #144]	; (8002f60 <ManualOverrideSwitches+0x1c4>)
 8002ed0:	f7fe fee2 	bl	8001c98 <PWM_Stop>
			TIMER_Stop(&TIMER_Motor);
 8002ed4:	4821      	ldr	r0, [pc, #132]	; (8002f5c <ManualOverrideSwitches+0x1c0>)
 8002ed6:	f7fe fcb7 	bl	8001848 <TIMER_Stop>
			WindowState = WindowState - 1;
 8002eda:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002ee2:	6013      	str	r3, [r2, #0]
			time = 0;
 8002ee4:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <ManualOverrideSwitches+0x1cc>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
			MOS_DOWN_State = DIGITAL_IO_GetInput(&MOS_DOWN);
 8002eea:	4819      	ldr	r0, [pc, #100]	; (8002f50 <ManualOverrideSwitches+0x1b4>)
 8002eec:	f7ff fc3c 	bl	8002768 <DIGITAL_IO_GetInput>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	613b      	str	r3, [r7, #16]
		status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(React_Node_LMO_02_Config.mo_ptr);
		status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
	}
	else if (MOS_DOWN_State == 0) 	// Down button pressed, downward movement requested
	{
		while ((MOS_DOWN_State == 0) && (WindowState != 0))
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <ManualOverrideSwitches+0x166>
 8002efa:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1bf      	bne.n	8002e82 <ManualOverrideSwitches+0xe6>
			TIMER_Stop(&TIMER_Motor);
			WindowState = WindowState - 1;
			time = 0;
			MOS_DOWN_State = DIGITAL_IO_GetInput(&MOS_DOWN);
		}
		int WindowStatePercentage = (WindowState * 10);
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <ManualOverrideSwitches+0x1b8>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	603b      	str	r3, [r7, #0]
		React_Node_LMO_02_Config.mo_ptr->can_data_word[0] = MOTOR_MODULE_ID;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <ManualOverrideSwitches+0x1d4>)
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	b292      	uxth	r2, r2
 8002f1a:	821a      	strh	r2, [r3, #16]
		React_Node_LMO_02_Config.mo_ptr->can_data_word[1] = 0x04;	//Status update
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2204      	movs	r2, #4
 8002f22:	825a      	strh	r2, [r3, #18]
		React_Node_LMO_02_Config.mo_ptr->can_data_word[2] = WindowStatePercentage;
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	829a      	strh	r2, [r3, #20]
		status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(React_Node_LMO_02_Config.mo_ptr);
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe f94c 	bl	80011d0 <XMC_CAN_MO_UpdateData>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	607b      	str	r3, [r7, #4]
		status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
 8002f3c:	480b      	ldr	r0, [pc, #44]	; (8002f6c <ManualOverrideSwitches+0x1d0>)
 8002f3e:	f7ff fa29 	bl	8002394 <CAN_NODE_MO_Transmit>
 8002f42:	4603      	mov	r3, r0
 8002f44:	607b      	str	r3, [r7, #4]
	}
}
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	08003824 	.word	0x08003824
 8002f50:	08003810 	.word	0x08003810
 8002f54:	1fffc8ec 	.word	0x1fffc8ec
 8002f58:	1fffc8f0 	.word	0x1fffc8f0
 8002f5c:	1fffc808 	.word	0x1fffc808
 8002f60:	1fffc830 	.word	0x1fffc830
 8002f64:	08003838 	.word	0x08003838
 8002f68:	1fffc8e8 	.word	0x1fffc8e8
 8002f6c:	08003898 	.word	0x08003898
 8002f70:	1fffc8d8 	.word	0x1fffc8d8

08002f74 <__aeabi_drsub>:
 8002f74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002f78:	e002      	b.n	8002f80 <__adddf3>
 8002f7a:	bf00      	nop

08002f7c <__aeabi_dsub>:
 8002f7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002f80 <__adddf3>:
 8002f80:	b530      	push	{r4, r5, lr}
 8002f82:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002f86:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002f8a:	ea94 0f05 	teq	r4, r5
 8002f8e:	bf08      	it	eq
 8002f90:	ea90 0f02 	teqeq	r0, r2
 8002f94:	bf1f      	itttt	ne
 8002f96:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002f9a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002f9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002fa2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002fa6:	f000 80e2 	beq.w	800316e <__adddf3+0x1ee>
 8002faa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002fae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002fb2:	bfb8      	it	lt
 8002fb4:	426d      	neglt	r5, r5
 8002fb6:	dd0c      	ble.n	8002fd2 <__adddf3+0x52>
 8002fb8:	442c      	add	r4, r5
 8002fba:	ea80 0202 	eor.w	r2, r0, r2
 8002fbe:	ea81 0303 	eor.w	r3, r1, r3
 8002fc2:	ea82 0000 	eor.w	r0, r2, r0
 8002fc6:	ea83 0101 	eor.w	r1, r3, r1
 8002fca:	ea80 0202 	eor.w	r2, r0, r2
 8002fce:	ea81 0303 	eor.w	r3, r1, r3
 8002fd2:	2d36      	cmp	r5, #54	; 0x36
 8002fd4:	bf88      	it	hi
 8002fd6:	bd30      	pophi	{r4, r5, pc}
 8002fd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002fdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002fe0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002fe4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002fe8:	d002      	beq.n	8002ff0 <__adddf3+0x70>
 8002fea:	4240      	negs	r0, r0
 8002fec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002ff0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002ff8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002ffc:	d002      	beq.n	8003004 <__adddf3+0x84>
 8002ffe:	4252      	negs	r2, r2
 8003000:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003004:	ea94 0f05 	teq	r4, r5
 8003008:	f000 80a7 	beq.w	800315a <__adddf3+0x1da>
 800300c:	f1a4 0401 	sub.w	r4, r4, #1
 8003010:	f1d5 0e20 	rsbs	lr, r5, #32
 8003014:	db0d      	blt.n	8003032 <__adddf3+0xb2>
 8003016:	fa02 fc0e 	lsl.w	ip, r2, lr
 800301a:	fa22 f205 	lsr.w	r2, r2, r5
 800301e:	1880      	adds	r0, r0, r2
 8003020:	f141 0100 	adc.w	r1, r1, #0
 8003024:	fa03 f20e 	lsl.w	r2, r3, lr
 8003028:	1880      	adds	r0, r0, r2
 800302a:	fa43 f305 	asr.w	r3, r3, r5
 800302e:	4159      	adcs	r1, r3
 8003030:	e00e      	b.n	8003050 <__adddf3+0xd0>
 8003032:	f1a5 0520 	sub.w	r5, r5, #32
 8003036:	f10e 0e20 	add.w	lr, lr, #32
 800303a:	2a01      	cmp	r2, #1
 800303c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003040:	bf28      	it	cs
 8003042:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003046:	fa43 f305 	asr.w	r3, r3, r5
 800304a:	18c0      	adds	r0, r0, r3
 800304c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003050:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003054:	d507      	bpl.n	8003066 <__adddf3+0xe6>
 8003056:	f04f 0e00 	mov.w	lr, #0
 800305a:	f1dc 0c00 	rsbs	ip, ip, #0
 800305e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003062:	eb6e 0101 	sbc.w	r1, lr, r1
 8003066:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800306a:	d31b      	bcc.n	80030a4 <__adddf3+0x124>
 800306c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003070:	d30c      	bcc.n	800308c <__adddf3+0x10c>
 8003072:	0849      	lsrs	r1, r1, #1
 8003074:	ea5f 0030 	movs.w	r0, r0, rrx
 8003078:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800307c:	f104 0401 	add.w	r4, r4, #1
 8003080:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003084:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003088:	f080 809a 	bcs.w	80031c0 <__adddf3+0x240>
 800308c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003090:	bf08      	it	eq
 8003092:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003096:	f150 0000 	adcs.w	r0, r0, #0
 800309a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800309e:	ea41 0105 	orr.w	r1, r1, r5
 80030a2:	bd30      	pop	{r4, r5, pc}
 80030a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80030a8:	4140      	adcs	r0, r0
 80030aa:	eb41 0101 	adc.w	r1, r1, r1
 80030ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80030b2:	f1a4 0401 	sub.w	r4, r4, #1
 80030b6:	d1e9      	bne.n	800308c <__adddf3+0x10c>
 80030b8:	f091 0f00 	teq	r1, #0
 80030bc:	bf04      	itt	eq
 80030be:	4601      	moveq	r1, r0
 80030c0:	2000      	moveq	r0, #0
 80030c2:	fab1 f381 	clz	r3, r1
 80030c6:	bf08      	it	eq
 80030c8:	3320      	addeq	r3, #32
 80030ca:	f1a3 030b 	sub.w	r3, r3, #11
 80030ce:	f1b3 0220 	subs.w	r2, r3, #32
 80030d2:	da0c      	bge.n	80030ee <__adddf3+0x16e>
 80030d4:	320c      	adds	r2, #12
 80030d6:	dd08      	ble.n	80030ea <__adddf3+0x16a>
 80030d8:	f102 0c14 	add.w	ip, r2, #20
 80030dc:	f1c2 020c 	rsb	r2, r2, #12
 80030e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80030e4:	fa21 f102 	lsr.w	r1, r1, r2
 80030e8:	e00c      	b.n	8003104 <__adddf3+0x184>
 80030ea:	f102 0214 	add.w	r2, r2, #20
 80030ee:	bfd8      	it	le
 80030f0:	f1c2 0c20 	rsble	ip, r2, #32
 80030f4:	fa01 f102 	lsl.w	r1, r1, r2
 80030f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80030fc:	bfdc      	itt	le
 80030fe:	ea41 010c 	orrle.w	r1, r1, ip
 8003102:	4090      	lslle	r0, r2
 8003104:	1ae4      	subs	r4, r4, r3
 8003106:	bfa2      	ittt	ge
 8003108:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800310c:	4329      	orrge	r1, r5
 800310e:	bd30      	popge	{r4, r5, pc}
 8003110:	ea6f 0404 	mvn.w	r4, r4
 8003114:	3c1f      	subs	r4, #31
 8003116:	da1c      	bge.n	8003152 <__adddf3+0x1d2>
 8003118:	340c      	adds	r4, #12
 800311a:	dc0e      	bgt.n	800313a <__adddf3+0x1ba>
 800311c:	f104 0414 	add.w	r4, r4, #20
 8003120:	f1c4 0220 	rsb	r2, r4, #32
 8003124:	fa20 f004 	lsr.w	r0, r0, r4
 8003128:	fa01 f302 	lsl.w	r3, r1, r2
 800312c:	ea40 0003 	orr.w	r0, r0, r3
 8003130:	fa21 f304 	lsr.w	r3, r1, r4
 8003134:	ea45 0103 	orr.w	r1, r5, r3
 8003138:	bd30      	pop	{r4, r5, pc}
 800313a:	f1c4 040c 	rsb	r4, r4, #12
 800313e:	f1c4 0220 	rsb	r2, r4, #32
 8003142:	fa20 f002 	lsr.w	r0, r0, r2
 8003146:	fa01 f304 	lsl.w	r3, r1, r4
 800314a:	ea40 0003 	orr.w	r0, r0, r3
 800314e:	4629      	mov	r1, r5
 8003150:	bd30      	pop	{r4, r5, pc}
 8003152:	fa21 f004 	lsr.w	r0, r1, r4
 8003156:	4629      	mov	r1, r5
 8003158:	bd30      	pop	{r4, r5, pc}
 800315a:	f094 0f00 	teq	r4, #0
 800315e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003162:	bf06      	itte	eq
 8003164:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003168:	3401      	addeq	r4, #1
 800316a:	3d01      	subne	r5, #1
 800316c:	e74e      	b.n	800300c <__adddf3+0x8c>
 800316e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003172:	bf18      	it	ne
 8003174:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003178:	d029      	beq.n	80031ce <__adddf3+0x24e>
 800317a:	ea94 0f05 	teq	r4, r5
 800317e:	bf08      	it	eq
 8003180:	ea90 0f02 	teqeq	r0, r2
 8003184:	d005      	beq.n	8003192 <__adddf3+0x212>
 8003186:	ea54 0c00 	orrs.w	ip, r4, r0
 800318a:	bf04      	itt	eq
 800318c:	4619      	moveq	r1, r3
 800318e:	4610      	moveq	r0, r2
 8003190:	bd30      	pop	{r4, r5, pc}
 8003192:	ea91 0f03 	teq	r1, r3
 8003196:	bf1e      	ittt	ne
 8003198:	2100      	movne	r1, #0
 800319a:	2000      	movne	r0, #0
 800319c:	bd30      	popne	{r4, r5, pc}
 800319e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80031a2:	d105      	bne.n	80031b0 <__adddf3+0x230>
 80031a4:	0040      	lsls	r0, r0, #1
 80031a6:	4149      	adcs	r1, r1
 80031a8:	bf28      	it	cs
 80031aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80031ae:	bd30      	pop	{r4, r5, pc}
 80031b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80031b4:	bf3c      	itt	cc
 80031b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80031ba:	bd30      	popcc	{r4, r5, pc}
 80031bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80031c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80031c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80031c8:	f04f 0000 	mov.w	r0, #0
 80031cc:	bd30      	pop	{r4, r5, pc}
 80031ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80031d2:	bf1a      	itte	ne
 80031d4:	4619      	movne	r1, r3
 80031d6:	4610      	movne	r0, r2
 80031d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80031dc:	bf1c      	itt	ne
 80031de:	460b      	movne	r3, r1
 80031e0:	4602      	movne	r2, r0
 80031e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80031e6:	bf06      	itte	eq
 80031e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80031ec:	ea91 0f03 	teqeq	r1, r3
 80031f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80031f4:	bd30      	pop	{r4, r5, pc}
 80031f6:	bf00      	nop

080031f8 <__aeabi_ui2d>:
 80031f8:	f090 0f00 	teq	r0, #0
 80031fc:	bf04      	itt	eq
 80031fe:	2100      	moveq	r1, #0
 8003200:	4770      	bxeq	lr
 8003202:	b530      	push	{r4, r5, lr}
 8003204:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003208:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800320c:	f04f 0500 	mov.w	r5, #0
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	e750      	b.n	80030b8 <__adddf3+0x138>
 8003216:	bf00      	nop

08003218 <__aeabi_i2d>:
 8003218:	f090 0f00 	teq	r0, #0
 800321c:	bf04      	itt	eq
 800321e:	2100      	moveq	r1, #0
 8003220:	4770      	bxeq	lr
 8003222:	b530      	push	{r4, r5, lr}
 8003224:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003228:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800322c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003230:	bf48      	it	mi
 8003232:	4240      	negmi	r0, r0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	e73e      	b.n	80030b8 <__adddf3+0x138>
 800323a:	bf00      	nop

0800323c <__aeabi_f2d>:
 800323c:	0042      	lsls	r2, r0, #1
 800323e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003242:	ea4f 0131 	mov.w	r1, r1, rrx
 8003246:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800324a:	bf1f      	itttt	ne
 800324c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003250:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003254:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003258:	4770      	bxne	lr
 800325a:	f092 0f00 	teq	r2, #0
 800325e:	bf14      	ite	ne
 8003260:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003264:	4770      	bxeq	lr
 8003266:	b530      	push	{r4, r5, lr}
 8003268:	f44f 7460 	mov.w	r4, #896	; 0x380
 800326c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003274:	e720      	b.n	80030b8 <__adddf3+0x138>
 8003276:	bf00      	nop

08003278 <__aeabi_ul2d>:
 8003278:	ea50 0201 	orrs.w	r2, r0, r1
 800327c:	bf08      	it	eq
 800327e:	4770      	bxeq	lr
 8003280:	b530      	push	{r4, r5, lr}
 8003282:	f04f 0500 	mov.w	r5, #0
 8003286:	e00a      	b.n	800329e <__aeabi_l2d+0x16>

08003288 <__aeabi_l2d>:
 8003288:	ea50 0201 	orrs.w	r2, r0, r1
 800328c:	bf08      	it	eq
 800328e:	4770      	bxeq	lr
 8003290:	b530      	push	{r4, r5, lr}
 8003292:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003296:	d502      	bpl.n	800329e <__aeabi_l2d+0x16>
 8003298:	4240      	negs	r0, r0
 800329a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800329e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80032a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80032a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80032aa:	f43f aedc 	beq.w	8003066 <__adddf3+0xe6>
 80032ae:	f04f 0203 	mov.w	r2, #3
 80032b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80032b6:	bf18      	it	ne
 80032b8:	3203      	addne	r2, #3
 80032ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80032be:	bf18      	it	ne
 80032c0:	3203      	addne	r2, #3
 80032c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80032c6:	f1c2 0320 	rsb	r3, r2, #32
 80032ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80032ce:	fa20 f002 	lsr.w	r0, r0, r2
 80032d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80032d6:	ea40 000e 	orr.w	r0, r0, lr
 80032da:	fa21 f102 	lsr.w	r1, r1, r2
 80032de:	4414      	add	r4, r2
 80032e0:	e6c1      	b.n	8003066 <__adddf3+0xe6>
 80032e2:	bf00      	nop

080032e4 <__aeabi_dmul>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80032ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80032ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80032f2:	bf1d      	ittte	ne
 80032f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80032f8:	ea94 0f0c 	teqne	r4, ip
 80032fc:	ea95 0f0c 	teqne	r5, ip
 8003300:	f000 f8de 	bleq	80034c0 <__aeabi_dmul+0x1dc>
 8003304:	442c      	add	r4, r5
 8003306:	ea81 0603 	eor.w	r6, r1, r3
 800330a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800330e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003312:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003316:	bf18      	it	ne
 8003318:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800331c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003324:	d038      	beq.n	8003398 <__aeabi_dmul+0xb4>
 8003326:	fba0 ce02 	umull	ip, lr, r0, r2
 800332a:	f04f 0500 	mov.w	r5, #0
 800332e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003332:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003336:	fbe0 e503 	umlal	lr, r5, r0, r3
 800333a:	f04f 0600 	mov.w	r6, #0
 800333e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003342:	f09c 0f00 	teq	ip, #0
 8003346:	bf18      	it	ne
 8003348:	f04e 0e01 	orrne.w	lr, lr, #1
 800334c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003350:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003354:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003358:	d204      	bcs.n	8003364 <__aeabi_dmul+0x80>
 800335a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800335e:	416d      	adcs	r5, r5
 8003360:	eb46 0606 	adc.w	r6, r6, r6
 8003364:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003368:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800336c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003370:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003374:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003378:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800337c:	bf88      	it	hi
 800337e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003382:	d81e      	bhi.n	80033c2 <__aeabi_dmul+0xde>
 8003384:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003388:	bf08      	it	eq
 800338a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800338e:	f150 0000 	adcs.w	r0, r0, #0
 8003392:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003396:	bd70      	pop	{r4, r5, r6, pc}
 8003398:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800339c:	ea46 0101 	orr.w	r1, r6, r1
 80033a0:	ea40 0002 	orr.w	r0, r0, r2
 80033a4:	ea81 0103 	eor.w	r1, r1, r3
 80033a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80033ac:	bfc2      	ittt	gt
 80033ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80033b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80033b6:	bd70      	popgt	{r4, r5, r6, pc}
 80033b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80033bc:	f04f 0e00 	mov.w	lr, #0
 80033c0:	3c01      	subs	r4, #1
 80033c2:	f300 80ab 	bgt.w	800351c <__aeabi_dmul+0x238>
 80033c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80033ca:	bfde      	ittt	le
 80033cc:	2000      	movle	r0, #0
 80033ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80033d2:	bd70      	pople	{r4, r5, r6, pc}
 80033d4:	f1c4 0400 	rsb	r4, r4, #0
 80033d8:	3c20      	subs	r4, #32
 80033da:	da35      	bge.n	8003448 <__aeabi_dmul+0x164>
 80033dc:	340c      	adds	r4, #12
 80033de:	dc1b      	bgt.n	8003418 <__aeabi_dmul+0x134>
 80033e0:	f104 0414 	add.w	r4, r4, #20
 80033e4:	f1c4 0520 	rsb	r5, r4, #32
 80033e8:	fa00 f305 	lsl.w	r3, r0, r5
 80033ec:	fa20 f004 	lsr.w	r0, r0, r4
 80033f0:	fa01 f205 	lsl.w	r2, r1, r5
 80033f4:	ea40 0002 	orr.w	r0, r0, r2
 80033f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80033fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003404:	fa21 f604 	lsr.w	r6, r1, r4
 8003408:	eb42 0106 	adc.w	r1, r2, r6
 800340c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003410:	bf08      	it	eq
 8003412:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f1c4 040c 	rsb	r4, r4, #12
 800341c:	f1c4 0520 	rsb	r5, r4, #32
 8003420:	fa00 f304 	lsl.w	r3, r0, r4
 8003424:	fa20 f005 	lsr.w	r0, r0, r5
 8003428:	fa01 f204 	lsl.w	r2, r1, r4
 800342c:	ea40 0002 	orr.w	r0, r0, r2
 8003430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003434:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003438:	f141 0100 	adc.w	r1, r1, #0
 800343c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003440:	bf08      	it	eq
 8003442:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	f1c4 0520 	rsb	r5, r4, #32
 800344c:	fa00 f205 	lsl.w	r2, r0, r5
 8003450:	ea4e 0e02 	orr.w	lr, lr, r2
 8003454:	fa20 f304 	lsr.w	r3, r0, r4
 8003458:	fa01 f205 	lsl.w	r2, r1, r5
 800345c:	ea43 0302 	orr.w	r3, r3, r2
 8003460:	fa21 f004 	lsr.w	r0, r1, r4
 8003464:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003468:	fa21 f204 	lsr.w	r2, r1, r4
 800346c:	ea20 0002 	bic.w	r0, r0, r2
 8003470:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003474:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003478:	bf08      	it	eq
 800347a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	f094 0f00 	teq	r4, #0
 8003484:	d10f      	bne.n	80034a6 <__aeabi_dmul+0x1c2>
 8003486:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800348a:	0040      	lsls	r0, r0, #1
 800348c:	eb41 0101 	adc.w	r1, r1, r1
 8003490:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003494:	bf08      	it	eq
 8003496:	3c01      	subeq	r4, #1
 8003498:	d0f7      	beq.n	800348a <__aeabi_dmul+0x1a6>
 800349a:	ea41 0106 	orr.w	r1, r1, r6
 800349e:	f095 0f00 	teq	r5, #0
 80034a2:	bf18      	it	ne
 80034a4:	4770      	bxne	lr
 80034a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80034aa:	0052      	lsls	r2, r2, #1
 80034ac:	eb43 0303 	adc.w	r3, r3, r3
 80034b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80034b4:	bf08      	it	eq
 80034b6:	3d01      	subeq	r5, #1
 80034b8:	d0f7      	beq.n	80034aa <__aeabi_dmul+0x1c6>
 80034ba:	ea43 0306 	orr.w	r3, r3, r6
 80034be:	4770      	bx	lr
 80034c0:	ea94 0f0c 	teq	r4, ip
 80034c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80034c8:	bf18      	it	ne
 80034ca:	ea95 0f0c 	teqne	r5, ip
 80034ce:	d00c      	beq.n	80034ea <__aeabi_dmul+0x206>
 80034d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80034d4:	bf18      	it	ne
 80034d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80034da:	d1d1      	bne.n	8003480 <__aeabi_dmul+0x19c>
 80034dc:	ea81 0103 	eor.w	r1, r1, r3
 80034e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80034ee:	bf06      	itte	eq
 80034f0:	4610      	moveq	r0, r2
 80034f2:	4619      	moveq	r1, r3
 80034f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80034f8:	d019      	beq.n	800352e <__aeabi_dmul+0x24a>
 80034fa:	ea94 0f0c 	teq	r4, ip
 80034fe:	d102      	bne.n	8003506 <__aeabi_dmul+0x222>
 8003500:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003504:	d113      	bne.n	800352e <__aeabi_dmul+0x24a>
 8003506:	ea95 0f0c 	teq	r5, ip
 800350a:	d105      	bne.n	8003518 <__aeabi_dmul+0x234>
 800350c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003510:	bf1c      	itt	ne
 8003512:	4610      	movne	r0, r2
 8003514:	4619      	movne	r1, r3
 8003516:	d10a      	bne.n	800352e <__aeabi_dmul+0x24a>
 8003518:	ea81 0103 	eor.w	r1, r1, r3
 800351c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003520:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003528:	f04f 0000 	mov.w	r0, #0
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003532:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003536:	bd70      	pop	{r4, r5, r6, pc}

08003538 <__aeabi_ddiv>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800353e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003546:	bf1d      	ittte	ne
 8003548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800354c:	ea94 0f0c 	teqne	r4, ip
 8003550:	ea95 0f0c 	teqne	r5, ip
 8003554:	f000 f8a7 	bleq	80036a6 <__aeabi_ddiv+0x16e>
 8003558:	eba4 0405 	sub.w	r4, r4, r5
 800355c:	ea81 0e03 	eor.w	lr, r1, r3
 8003560:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003564:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003568:	f000 8088 	beq.w	800367c <__aeabi_ddiv+0x144>
 800356c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003570:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003574:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003578:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800357c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003580:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003584:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003588:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800358c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003590:	429d      	cmp	r5, r3
 8003592:	bf08      	it	eq
 8003594:	4296      	cmpeq	r6, r2
 8003596:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800359a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800359e:	d202      	bcs.n	80035a6 <__aeabi_ddiv+0x6e>
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80035a6:	1ab6      	subs	r6, r6, r2
 80035a8:	eb65 0503 	sbc.w	r5, r5, r3
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80035b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80035b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80035ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80035be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80035c2:	bf22      	ittt	cs
 80035c4:	1ab6      	subcs	r6, r6, r2
 80035c6:	4675      	movcs	r5, lr
 80035c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80035d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80035d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80035da:	bf22      	ittt	cs
 80035dc:	1ab6      	subcs	r6, r6, r2
 80035de:	4675      	movcs	r5, lr
 80035e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80035ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80035ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80035f2:	bf22      	ittt	cs
 80035f4:	1ab6      	subcs	r6, r6, r2
 80035f6:	4675      	movcs	r5, lr
 80035f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8003602:	ebb6 0e02 	subs.w	lr, r6, r2
 8003606:	eb75 0e03 	sbcs.w	lr, r5, r3
 800360a:	bf22      	ittt	cs
 800360c:	1ab6      	subcs	r6, r6, r2
 800360e:	4675      	movcs	r5, lr
 8003610:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003614:	ea55 0e06 	orrs.w	lr, r5, r6
 8003618:	d018      	beq.n	800364c <__aeabi_ddiv+0x114>
 800361a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800361e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003622:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003626:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800362a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800362e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003632:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003636:	d1c0      	bne.n	80035ba <__aeabi_ddiv+0x82>
 8003638:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800363c:	d10b      	bne.n	8003656 <__aeabi_ddiv+0x11e>
 800363e:	ea41 0100 	orr.w	r1, r1, r0
 8003642:	f04f 0000 	mov.w	r0, #0
 8003646:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800364a:	e7b6      	b.n	80035ba <__aeabi_ddiv+0x82>
 800364c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003650:	bf04      	itt	eq
 8003652:	4301      	orreq	r1, r0
 8003654:	2000      	moveq	r0, #0
 8003656:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800365a:	bf88      	it	hi
 800365c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003660:	f63f aeaf 	bhi.w	80033c2 <__aeabi_dmul+0xde>
 8003664:	ebb5 0c03 	subs.w	ip, r5, r3
 8003668:	bf04      	itt	eq
 800366a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800366e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003672:	f150 0000 	adcs.w	r0, r0, #0
 8003676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003680:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003684:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003688:	bfc2      	ittt	gt
 800368a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800368e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003692:	bd70      	popgt	{r4, r5, r6, pc}
 8003694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003698:	f04f 0e00 	mov.w	lr, #0
 800369c:	3c01      	subs	r4, #1
 800369e:	e690      	b.n	80033c2 <__aeabi_dmul+0xde>
 80036a0:	ea45 0e06 	orr.w	lr, r5, r6
 80036a4:	e68d      	b.n	80033c2 <__aeabi_dmul+0xde>
 80036a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80036aa:	ea94 0f0c 	teq	r4, ip
 80036ae:	bf08      	it	eq
 80036b0:	ea95 0f0c 	teqeq	r5, ip
 80036b4:	f43f af3b 	beq.w	800352e <__aeabi_dmul+0x24a>
 80036b8:	ea94 0f0c 	teq	r4, ip
 80036bc:	d10a      	bne.n	80036d4 <__aeabi_ddiv+0x19c>
 80036be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80036c2:	f47f af34 	bne.w	800352e <__aeabi_dmul+0x24a>
 80036c6:	ea95 0f0c 	teq	r5, ip
 80036ca:	f47f af25 	bne.w	8003518 <__aeabi_dmul+0x234>
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	e72c      	b.n	800352e <__aeabi_dmul+0x24a>
 80036d4:	ea95 0f0c 	teq	r5, ip
 80036d8:	d106      	bne.n	80036e8 <__aeabi_ddiv+0x1b0>
 80036da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80036de:	f43f aefd 	beq.w	80034dc <__aeabi_dmul+0x1f8>
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	e722      	b.n	800352e <__aeabi_dmul+0x24a>
 80036e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80036ec:	bf18      	it	ne
 80036ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80036f2:	f47f aec5 	bne.w	8003480 <__aeabi_dmul+0x19c>
 80036f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80036fa:	f47f af0d 	bne.w	8003518 <__aeabi_dmul+0x234>
 80036fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003702:	f47f aeeb 	bne.w	80034dc <__aeabi_dmul+0x1f8>
 8003706:	e712      	b.n	800352e <__aeabi_dmul+0x24a>

08003708 <__aeabi_d2iz>:
 8003708:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800370c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003710:	d215      	bcs.n	800373e <__aeabi_d2iz+0x36>
 8003712:	d511      	bpl.n	8003738 <__aeabi_d2iz+0x30>
 8003714:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003718:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800371c:	d912      	bls.n	8003744 <__aeabi_d2iz+0x3c>
 800371e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003722:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003726:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800372a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800372e:	fa23 f002 	lsr.w	r0, r3, r2
 8003732:	bf18      	it	ne
 8003734:	4240      	negne	r0, r0
 8003736:	4770      	bx	lr
 8003738:	f04f 0000 	mov.w	r0, #0
 800373c:	4770      	bx	lr
 800373e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003742:	d105      	bne.n	8003750 <__aeabi_d2iz+0x48>
 8003744:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003748:	bf08      	it	eq
 800374a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800374e:	4770      	bx	lr
 8003750:	f04f 0000 	mov.w	r0, #0
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <__libc_init_array+0x3c>)
 800375c:	4c0e      	ldr	r4, [pc, #56]	; (8003798 <__libc_init_array+0x40>)
 800375e:	1ae4      	subs	r4, r4, r3
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2500      	movs	r5, #0
 8003764:	461e      	mov	r6, r3
 8003766:	42a5      	cmp	r5, r4
 8003768:	d004      	beq.n	8003774 <__libc_init_array+0x1c>
 800376a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800376e:	4798      	blx	r3
 8003770:	3501      	adds	r5, #1
 8003772:	e7f8      	b.n	8003766 <__libc_init_array+0xe>
 8003774:	f7fd ff9e 	bl	80016b4 <_init>
 8003778:	4c08      	ldr	r4, [pc, #32]	; (800379c <__libc_init_array+0x44>)
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <__libc_init_array+0x48>)
 800377c:	1ae4      	subs	r4, r4, r3
 800377e:	10a4      	asrs	r4, r4, #2
 8003780:	2500      	movs	r5, #0
 8003782:	461e      	mov	r6, r3
 8003784:	42a5      	cmp	r5, r4
 8003786:	d004      	beq.n	8003792 <__libc_init_array+0x3a>
 8003788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800378c:	4798      	blx	r3
 800378e:	3501      	adds	r5, #1
 8003790:	e7f8      	b.n	8003784 <__libc_init_array+0x2c>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	1fffc8dc 	.word	0x1fffc8dc
 8003798:	1fffc8dc 	.word	0x1fffc8dc
 800379c:	1fffc8dc 	.word	0x1fffc8dc
 80037a0:	1fffc8dc 	.word	0x1fffc8dc

080037a4 <PWM_Motor_compare_config>:
 80037a4:	00000000 00000004                       ........

080037ac <PWM_Motor_gpio_out_config>:
 80037ac:	00000098 00010000 00000004              ............

080037b8 <Receive_CAN_Handler>:
 80037b8:	01003f4d                                M?..

080037bc <Timer_Interrupt>:
 80037bc:	01000131                                1...

080037c0 <LED_Indicator>:
 80037c0:	48028000 00000080 00010000 00000000     ...H............
 80037d0:	00000001                                ....

080037d4 <BoardButton>:
 80037d4:	48028100 00000000 00000000 00000000     ...H............
 80037e4:	0000000f                                ....

080037e8 <LIMIT_SWITCH_BOTTOM>:
 80037e8:	48028200 00000010 00000000 00000000     ...H............
 80037f8:	00000009                                ....

080037fc <LIMIT_SWITCH_TOP>:
 80037fc:	48028200 00000010 00000000 00000000     ...H............
 800380c:	00000003                                ....

08003810 <MOS_DOWN>:
 8003810:	48028100 00000010 00000000 00000000     ...H............
 8003820:	00000007                                ....

08003824 <MOS_UP>:
 8003824:	48028100 00000010 00000000 00000000     ...H............
 8003834:	00000009                                ....

08003838 <Motor_Direction>:
 8003838:	48028100 00000080 00010000 00000000     ...H............
 8003848:	00000000 01040350 00010000 00000000     ....P...........
 8003858:	00010000 01010101                       ........

08003860 <React_Node_gpio_out>:
 8003860:	48028200 00000000                       ...H....

08003868 <React_Node_gpio_out_config>:
 8003868:	00000088 00000001 00000002              ............

08003874 <React_Node_gpio_in>:
 8003874:	48028e00 00000003                       ...H....

0800387c <React_Node_gpio_in_config>:
	...

08003888 <React_Node_sr>:
 8003888:	00000000                                ....

0800388c <React_Node_LMO_01_Config>:
 800388c:	1fffc890 00010023 00000001              ....#.......

08003898 <React_Node_LMO_02_Config>:
 8003898:	1fffc8b0 00000022 00000000              ....".......

080038a4 <React_Node>:
 80038a4:	1fffc874 48014200 1fffc880 0800388c     t....B.H.....8..
 80038b4:	08003898 00000000 00000000 00000000     .8..............
	...
 8003930:	08003888 08003860 08003868 08003874     .8..`8..h8..t8..
 8003940:	0800387c 00020001 00000000              |8..........
