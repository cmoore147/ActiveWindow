
4200_CAN_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002044  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1fffc000  1fffc000  00014000  2**0
                  ALLOC
  2 .data         0000005c  1fffc800  0c002044  0000c800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  1fffc85c  0c0020a0  0000c85c  2**2
                  ALLOC
  4 .no_init      00000020  20005fc0  20005fc0  00014000  2**2
                  ALLOC
  5 .debug_aranges 00000928  00000000  00000000  0000c860  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bcad  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fb9  00000000  00000000  00018e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ca3  00000000  00000000  0001adee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002474  00000000  00000000  0001fa94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005652  00000000  00000000  00021f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004b2e  00000000  00000000  0002755a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  0002c088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000046c  00000000  00000000  0002c840  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800004c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000108:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 f9 1d 00 08 91 02 00 08 91 02 00 08     ................
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001a0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 91 02 00 08     ................
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c002044 	.word	0x0c002044
 800024c:	1fffc800 	.word	0x1fffc800
 8000250:	0000005c 	.word	0x0000005c
 8000254:	0c002044 	.word	0x0c002044
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fffc85c 	.word	0x1fffc85c
 8000264:	00000004 	.word	0x00000004
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000270:	1fffc800 	.word	0x1fffc800

	.align	1
    .thumb
 8000274:	08000295 	.word	0x08000295
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	08001ecd 	.word	0x08001ecd
    blx  r0
#endif

    ldr  r0, =main
 800028c:	08001e71 	.word	0x08001e71

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000294:	b598      	push	{r3, r4, r7, lr}
 8000296:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <SystemInit+0x28>)
 800029a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800029e:	4614      	mov	r4, r2
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x2c>)
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <SystemInit+0x30>)
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002b0:	f001 fa16 	bl	80016e0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b4:	f001 fa7e 	bl	80017b4 <SystemCoreClockSetup>
}
 80002b8:	bd98      	pop	{r3, r4, r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20005fc4 	.word	0x20005fc4
 80002c0:	20005fd4 	.word	0x20005fd4
 80002c4:	20000084 	.word	0x20000084

080002c8 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <SystemCoreClockUpdate+0xc4>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d03e      	beq.n	8000358 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002e6:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e002      	b.n	80002f2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002ec:	f001 fa58 	bl	80017a0 <OSCHP_GetFrequency>
 80002f0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002f2:	4b27      	ldr	r3, [pc, #156]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d020      	beq.n	8000340 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000306:	0e1b      	lsrs	r3, r3, #24
 8000308:	3301      	adds	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000322:	0c1b      	lsrs	r3, r3, #16
 8000324:	3301      	adds	r3, #1
 8000326:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	fbb2 f3f3 	udiv	r3, r2, r3
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e00d      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000348:	3301      	adds	r3, #1
 800034a:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	fbb2 f3f3 	udiv	r3, r2, r3
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	e001      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 800035a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	3301      	adds	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	fbb2 f3f3 	udiv	r3, r2, r3
 800036a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	3301      	adds	r3, #1
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	fbb2 f3f3 	udiv	r3, r2, r3
 800037c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800037e:	4a06      	ldr	r2, [pc, #24]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	50004600 	.word	0x50004600
 8000390:	50004710 	.word	0x50004710
 8000394:	016e3600 	.word	0x016e3600
 8000398:	20005fc0 	.word	0x20005fc0

0800039c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	460b      	mov	r3, r1
 80003a6:	607a      	str	r2, [r7, #4]
 80003a8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	089b      	lsrs	r3, r3, #2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4618      	mov	r0, r3
 80003b2:	7afb      	ldrb	r3, [r7, #11]
 80003b4:	089b      	lsrs	r3, r3, #2
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3204      	adds	r2, #4
 80003be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003c2:	7afb      	ldrb	r3, [r7, #11]
 80003c4:	f003 0303 	and.w	r3, r3, #3
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	4619      	mov	r1, r3
 80003cc:	23f8      	movs	r3, #248	; 0xf8
 80003ce:	408b      	lsls	r3, r1
 80003d0:	43db      	mvns	r3, r3
 80003d2:	ea02 0103 	and.w	r1, r2, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	1d02      	adds	r2, r0, #4
 80003da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4619      	mov	r1, r3
 80003e8:	2303      	movs	r3, #3
 80003ea:	408b      	lsls	r3, r1
 80003ec:	43db      	mvns	r3, r3
 80003ee:	401a      	ands	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	4a38      	ldr	r2, [pc, #224]	; (80004d8 <XMC_GPIO_Init+0x13c>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d10a      	bne.n	8000412 <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000400:	7afb      	ldrb	r3, [r7, #11]
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	401a      	ands	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	661a      	str	r2, [r3, #96]	; 0x60
 8000410:	e042      	b.n	8000498 <XMC_GPIO_Init+0xfc>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	b25b      	sxtb	r3, r3
 800041a:	2b00      	cmp	r3, #0
 800041c:	da3c      	bge.n	8000498 <XMC_GPIO_Init+0xfc>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	409a      	lsls	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4618      	mov	r0, r3
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	461a      	mov	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3210      	adds	r2, #16
 800043e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000442:	7afb      	ldrb	r3, [r7, #11]
 8000444:	f003 0307 	and.w	r3, r3, #7
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4619      	mov	r1, r3
 800044c:	2307      	movs	r3, #7
 800044e:	408b      	lsls	r3, r1
 8000450:	43db      	mvns	r3, r3
 8000452:	ea02 0103 	and.w	r1, r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f100 0210 	add.w	r2, r0, #16
 800045c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000460:	7afb      	ldrb	r3, [r7, #11]
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	b2db      	uxtb	r3, r3
 8000466:	4618      	mov	r0, r3
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	461a      	mov	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3210      	adds	r2, #16
 8000474:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	7a1b      	ldrb	r3, [r3, #8]
 800047c:	4619      	mov	r1, r3
 800047e:	7afb      	ldrb	r3, [r7, #11]
 8000480:	f003 0307 	and.w	r3, r3, #7
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	ea42 0103 	orr.w	r1, r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f100 0210 	add.w	r2, r0, #16
 8000494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	089b      	lsrs	r3, r3, #2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3204      	adds	r2, #4
 80004ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	f003 0303 	and.w	r3, r3, #3
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	ea42 0103 	orr.w	r1, r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	1d02      	adds	r2, r0, #4
 80004ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	48028e00 	.word	0x48028e00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20005fc0 	.word	0x20005fc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed8 	bl	80002c8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20005fc0 	.word	0x20005fc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f89b 	bl	80006c8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fa25 	bl	80009e0 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 fa5d 	bl	8000a5c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 fa48 	bl	8000a38 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f8ff 	bl	80007bc <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f9e0 	bl	8000994 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f90d 	bl	80007f8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f930 	bl	8000848 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f917 	bl	8000820 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f93a 	bl	8000870 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 fa62 	bl	8000acc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fa87 	bl	8000b1c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000622:	f000 fa9f 	bl	8000b64 <XMC_SCU_CLOCK_DisableSystemPll>
 8000626:	e014      	b.n	8000652 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000628:	f000 fa8c 	bl	8000b44 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	8899      	ldrh	r1, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000638:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4608      	mov	r0, r1
 8000648:	4611      	mov	r1, r2
 800064a:	462a      	mov	r2, r5
 800064c:	4623      	mov	r3, r4
 800064e:	f000 fa99 	bl	8000b84 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800065a:	d103      	bne.n	8000664 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800065c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000660:	f000 f832 	bl	80006c8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000664:	f7ff fe30 	bl	80002c8 <SystemCoreClockUpdate>
}
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bdb0      	pop	{r4, r5, r7, pc}
 800066e:	bf00      	nop

08000670 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	0f1b      	lsrs	r3, r3, #28
 800067c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000684:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	461a      	mov	r2, r3
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000694:	4413      	add	r3, r2
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	50004414 	.word	0x50004414

080006a8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006ac:	f7ff ff16 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006b0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006b4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	50004600 	.word	0x50004600

080006c8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4313      	orrs	r3, r2
 80006de:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	50004600 	.word	0x50004600

080006f0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	50004600 	.word	0x50004600

08000718 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000720:	4906      	ldr	r1, [pc, #24]	; (800073c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4313      	orrs	r3, r2
 800072e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	50004600 	.word	0x50004600

08000740 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d108      	bne.n	8000762 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	60d3      	str	r3, [r2, #12]
 8000760:	e007      	b.n	8000772 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	60d3      	str	r3, [r2, #12]
  }
}
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	50004710 	.word	0x50004710

08000780 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800078a:	bf00      	nop
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800078e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f8      	bne.n	800078c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800079a:	4907      	ldr	r1, [pc, #28]	; (80007b8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007a6:	4313      	orrs	r3, r2
 80007a8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	50004000 	.word	0x50004000
 80007b8:	50004300 	.word	0x50004300

080007bc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007c6:	bf00      	nop
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007d6:	4907      	ldr	r1, [pc, #28]	; (80007f4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	50004000 	.word	0x50004000
 80007f4:	50004300 	.word	0x50004300

080007f8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800080e:	4313      	orrs	r3, r2
 8000810:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	50004600 	.word	0x50004600

08000820 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000828:	4906      	ldr	r1, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004600 	.word	0x50004600

08000848 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800085e:	4313      	orrs	r3, r2
 8000860:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	50004600 	.word	0x50004600

08000870 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000886:	4313      	orrs	r3, r2
 8000888:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	50004600 	.word	0x50004600

08000898 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008ae:	4313      	orrs	r3, r2
 80008b0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	50004600 	.word	0x50004600

080008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008d6:	4313      	orrs	r3, r2
 80008d8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	50004600 	.word	0x50004600

080008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	0f1b      	lsrs	r3, r3, #28
 80008f4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80008fc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	461a      	mov	r2, r3
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 800090c:	4413      	add	r3, r2
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	50004648 	.word	0x50004648

08000920 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800092a:	4a19      	ldr	r2, [pc, #100]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000942:	4913      	ldr	r1, [pc, #76]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3b01      	subs	r3, #1
 800094e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000950:	4313      	orrs	r3, r2
 8000952:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f023 0310 	bic.w	r3, r3, #16
 800096a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800096c:	4a08      	ldr	r2, [pc, #32]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000978:	bf00      	nop
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f9      	beq.n	800097a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	50004710 	.word	0x50004710

08000994 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10e      	bne.n	80009ce <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009ba:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f7ff fda5 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009c2:	4a06      	ldr	r2, [pc, #24]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009cc:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009ce:	2064      	movs	r0, #100	; 0x64
 80009d0:	f7ff fd9c 	bl	800050c <XMC_SCU_lDelay>
}
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	50004710 	.word	0x50004710

080009e0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009f6:	bf00      	nop
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f9      	beq.n	80009f8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00a      	beq.n	8000a26 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a18:	bf00      	nop
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f9      	bne.n	8000a1a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	50004200 	.word	0x50004200
 8000a34:	50004400 	.word	0x50004400

08000a38 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf0c      	ite	eq
 8000a48:	2301      	moveq	r3, #1
 8000a4a:	2300      	movne	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	50004300 	.word	0x50004300

08000a5c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000a60:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a64:	f7ff fd80 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a68:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a72:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000a74:	bf00      	nop
 8000a76:	f7ff fd6b 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f8      	beq.n	8000a76 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000a84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a88:	f7ff fd6e 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000a92:	bf00      	nop
 8000a94:	f7ff fd5c 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f8      	beq.n	8000a94 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000aa2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000aa6:	f7ff fd5f 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000ab6:	bf00      	nop
 8000ab8:	f7ff fd4a 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f8      	beq.n	8000ab8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	50004300 	.word	0x50004300

08000acc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ad0:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ada:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000adc:	4d0d      	ldr	r5, [pc, #52]	; (8000b14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ae6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000aea:	f000 fe59 	bl	80017a0 <OSCHP_GetFrequency>
 8000aee:	4602      	mov	r2, r0
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000af2:	fba3 2302 	umull	r2, r3, r3, r2
 8000af6:	0d1b      	lsrs	r3, r3, #20
 8000af8:	3b01      	subs	r3, #1
 8000afa:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000afc:	4323      	orrs	r3, r4
 8000afe:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b02:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b0a:	6053      	str	r3, [r2, #4]
}
 8000b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	50004710 	.word	0x50004710
 8000b14:	50004700 	.word	0x50004700
 8000b18:	6b5fca6b 	.word	0x6b5fca6b

08000b1c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b28:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	2300      	movne	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	50004710 	.word	0x50004710

08000b44 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b52:	f023 0302 	bic.w	r3, r3, #2
 8000b56:	6053      	str	r3, [r2, #4]
}
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	50004710 	.word	0x50004710

08000b64 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6053      	str	r3, [r2, #4]
}
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	50004710 	.word	0x50004710

08000b84 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60ba      	str	r2, [r7, #8]
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4603      	mov	r3, r0
 8000b90:	81fb      	strh	r3, [r7, #14]
 8000b92:	460b      	mov	r3, r1
 8000b94:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b96:	89fb      	ldrh	r3, [r7, #14]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fdd1 	bl	8000740 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	f040 8084 	bne.w	8000cae <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000bac:	f000 fdf8 	bl	80017a0 <OSCHP_GetFrequency>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	4b4b      	ldr	r3, [pc, #300]	; (8000ce0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8000bb8:	0c9b      	lsrs	r3, r3, #18
 8000bba:	059b      	lsls	r3, r3, #22
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e002      	b.n	8000bc6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000bc0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bc4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	fb02 f203 	mul.w	r2, r2, r3
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	4a42      	ldr	r2, [pc, #264]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	0d9b      	lsrs	r3, r3, #22
 8000be2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000be4:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bf0:	4a3d      	ldr	r2, [pc, #244]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bfc:	493a      	ldr	r1, [pc, #232]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c04:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	0212      	lsls	r2, r2, #8
 8000c0c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c14:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c20:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f023 0310 	bic.w	r3, r3, #16
 8000c36:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c38:	4a2b      	ldr	r2, [pc, #172]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c42:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c44:	bf00      	nop
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f9      	beq.n	8000c46 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c52:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c5e:	bf00      	nop
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f9      	bne.n	8000c60 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	095b      	lsrs	r3, r3, #5
 8000c76:	0d9b      	lsrs	r3, r3, #22
 8000c78:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c7a:	6a3a      	ldr	r2, [r7, #32]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d202      	bcs.n	8000c88 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c82:	6938      	ldr	r0, [r7, #16]
 8000c84:	f000 f838 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	085b      	lsrs	r3, r3, #1
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	0d9b      	lsrs	r3, r3, #22
 8000c96:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d202      	bcs.n	8000ca6 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000ca0:	6938      	ldr	r0, [r7, #16]
 8000ca2:	f000 f829 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000ca6:	6a38      	ldr	r0, [r7, #32]
 8000ca8:	f000 f826 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000cac:	e015      	b.n	8000cda <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000ccc:	bf00      	nop
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f9      	beq.n	8000cce <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	aaaaaaab 	.word	0xaaaaaaab
 8000ce8:	50004710 	.word	0x50004710
 8000cec:	f08080ff 	.word	0xf08080ff
 8000cf0:	88888889 	.word	0x88888889
 8000cf4:	b60b60b7 	.word	0xb60b60b7

08000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d14:	2032      	movs	r0, #50	; 0x32
 8000d16:	f7ff fbf9 	bl	800050c <XMC_SCU_lDelay>
}
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	50004710 	.word	0x50004710

08000d24 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bf0c      	ite	eq
 8000d3a:	2301      	moveq	r3, #1
 8000d3c:	2300      	movne	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	4608      	mov	r0, r1
 8000d56:	4611      	mov	r1, r2
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	70fb      	strb	r3, [r7, #3]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	70bb      	strb	r3, [r7, #2]
 8000d62:	4613      	mov	r3, r2
 8000d64:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d66:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000d68:	78bb      	ldrb	r3, [r7, #2]
 8000d6a:	041b      	lsls	r3, r3, #16
 8000d6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d70:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000d72:	787b      	ldrb	r3, [r7, #1]
 8000d74:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000d76:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	601a      	str	r2, [r3, #0]
}
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	bf38      	it	cc
 8000dda:	4613      	movcc	r3, r2
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4293      	cmp	r3, r2
 8000df8:	bf28      	it	cs
 8000dfa:	4613      	movcs	r3, r2
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
                                               const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	6852      	ldr	r2, [r2, #4]
 8000e1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e1e:	fb02 f201 	mul.w	r2, r2, r1
 8000e22:	1a9b      	subs	r3, r3, r2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f040 808e 	bne.w	8000f46 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
  {
    uint32_t prescaler;
    uint32_t div8 = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8000e3c:	2319      	movs	r3, #25
 8000e3e:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000e48:	e04b      	b.n	8000ee2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e52:	6979      	ldr	r1, [r7, #20]
 8000e54:	fb01 f202 	mul.w	r2, r1, r2
 8000e58:	1a9b      	subs	r3, r3, r2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d13e      	bne.n	8000edc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
      {
    	  div8 = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d034      	beq.n	8000edc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e78:	d830      	bhi.n	8000edc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        {
          if (prescaler >= 64)
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e7e:	d90a      	bls.n	8000e96 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8a>
            {
              --ntq;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
              continue;
 8000e90:	e027      	b.n	8000ee2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
            }
            else
            {
              div8 = 1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	8912      	ldrh	r2, [r2, #8]
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	4a2b      	ldr	r2, [pc, #172]	; (8000f50 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x148>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	0b5b      	lsrs	r3, r3, #13
 8000eaa:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d90f      	bls.n	8000edc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	d80c      	bhi.n	8000edc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d909      	bls.n	8000edc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d806      	bhi.n	8000edc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	895b      	ldrh	r3, [r3, #10]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d800      	bhi.n	8000edc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
          {
            break;
 8000eda:	e005      	b.n	8000ee8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe0>
          }


        }
      }
      --ntq;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d8b0      	bhi.n	8000e4a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x42>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b07      	cmp	r3, #7
 8000eec:	d92b      	bls.n	8000f46 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
    {


      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff4a 	bl	8000d88 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	031b      	lsls	r3, r3, #12
 8000efa:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	895b      	ldrh	r3, [r3, #10]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	b2db      	uxtb	r3, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f08:	431a      	orrs	r2, r3
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8000f14:	ea42 0103 	orr.w	r1, r2, r3
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	461a      	mov	r2, r3
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	40d3      	lsrs	r3, r2
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8000f2c:	ea41 0203 	orr.w	r2, r1, r3
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	03db      	lsls	r3, r3, #15
 8000f34:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8000f36:	431a      	orrs	r2, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	611a      	str	r2, [r3, #16]
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff33 	bl	8000da8 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x140>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	d1b71759 	.word	0xd1b71759

08000f54 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
 8000f60:	4613      	mov	r3, r2
 8000f62:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8000f64:	bf00      	nop
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fedc 	bl	8000d24 <XMC_CAN_IsPanelControlReady>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f083 0301 	eor.w	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f6      	bne.n	8000f66 <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	78ba      	ldrb	r2, [r7, #2]
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	2102      	movs	r1, #2
 8000f84:	f7ff fee2 	bl	8000d4c <XMC_CAN_PanelControl>
}
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop

08000f90 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 8000f98:	480a      	ldr	r0, [pc, #40]	; (8000fc4 <XMC_CAN_Enable+0x34>)
 8000f9a:	f7ff fca5 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8000f9e:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <XMC_CAN_Enable+0x34>)
 8000fa0:	f7ff fb66 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 0201 	bic.w	r2, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8000fb0:	bf00      	nop
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f9      	bne.n	8000fb2 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	10000010 	.word	0x10000010

08000fc8 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
      frequency = 0;
      break;
  }
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8000fe8:	f7ff fb5e 	bl	80006a8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8000fec:	60f8      	str	r0, [r7, #12]
#endif  

  return frequency;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	460b      	mov	r3, r1
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f7ff ffc2 	bl	8000f90 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff ffd9 	bl	8000fc8 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ffe2 	bl	8000fe0 <XMC_CAN_GetBaudrateClockFrequency>
 800101c:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800102a:	2000      	movs	r0, #0
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fecb 	bl	8000dc8 <max>
 8001032:	4603      	mov	r3, r0
 8001034:	4618      	mov	r0, r3
 8001036:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800103a:	f7ff fed5 	bl	8000de8 <min>
 800103e:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	fbb2 f3f3 	udiv	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	60da      	str	r2, [r3, #12]

  return freq_n;
 800106e:	697b      	ldr	r3, [r7, #20]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8001088:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	035a      	lsls	r2, r3, #13
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	6892      	ldr	r2, [r2, #8]
 80010ac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80010b0:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	6891      	ldr	r1, [r2, #8]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	430a      	orrs	r2, r1
 80010c0:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	79db      	ldrb	r3, [r3, #7]
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	79db      	ldrb	r3, [r3, #7]
 80010d4:	f003 0320 	and.w	r3, r3, #32
 80010d8:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d100      	bne.n	80010e0 <XMC_CAN_MO_Config+0x68>
 80010de:	e060      	b.n	80011a2 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d000      	beq.n	80010f2 <XMC_CAN_MO_Config+0x7a>
 80010f0:	e057      	b.n	80011a2 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2220      	movs	r2, #32
 80010f8:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	79db      	ldrb	r3, [r3, #7]
 80010fe:	f003 0320 	and.w	r3, r3, #32
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d128      	bne.n	800115a <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001114:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800111e:	049b      	lsls	r3, r3, #18
 8001120:	461a      	mov	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800113c:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001146:	049b      	lsls	r3, r3, #18
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	e009      	b.n	800116e <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6852      	ldr	r2, [r2, #4]
 8001162:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6892      	ldr	r2, [r2, #8]
 800116c:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7e1b      	ldrb	r3, [r3, #24]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d10c      	bne.n	8001190 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f81a 	bl	80011b0 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001184:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <XMC_CAN_MO_Config+0x130>)
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	e008      	b.n	80011a2 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001198:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a03      	ldr	r2, [pc, #12]	; (80011ac <XMC_CAN_MO_Config+0x134>)
 80011a0:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	062000c0 	.word	0x062000c0
 80011ac:	00a00640 	.word	0x00a00640

080011b0 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80011b8:	2303      	movs	r3, #3
 80011ba:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e1b      	ldrb	r3, [r3, #24]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d122      	bne.n	800120a <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2220      	movs	r2, #32
 80011ca:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	7b12      	ldrb	r2, [r2, #12]
 80011de:	0612      	lsls	r2, r2, #24
 80011e0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6912      	ldr	r2, [r2, #16]
 80011f0:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6952      	ldr	r2, [r2, #20]
 80011fa:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <XMC_CAN_MO_UpdateData+0x6c>)
 8001202:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e001      	b.n	800120e <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800120a:	2303      	movs	r3, #3
 800120c:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	00280040 	.word	0x00280040

08001220 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 800124e:	2304      	movs	r3, #4
 8001250:	75fb      	strb	r3, [r7, #23]
 8001252:	e00c      	b.n	800126e <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d102      	bne.n	8001260 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800125a:	2302      	movs	r3, #2
 800125c:	75fb      	strb	r3, [r7, #23]
 800125e:	e006      	b.n	800126e <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001268:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800126e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800129a:	0adb      	lsrs	r3, r3, #11
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012b2:	2303      	movs	r3, #3
 80012b4:	75fb      	strb	r3, [r7, #23]
 80012b6:	e0a7      	b.n	8001408 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d102      	bne.n	80012c4 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 80012be:	2302      	movs	r3, #2
 80012c0:	75fb      	strb	r3, [r7, #23]
 80012c2:	e0a1      	b.n	8001408 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2208      	movs	r2, #8
 80012ca:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012d6:	0f5b      	lsrs	r3, r3, #29
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d140      	bne.n	800135e <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	79d3      	ldrb	r3, [r2, #7]
 80012e0:	f36f 1345 	bfc	r3, #5, #1
 80012e4:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <XMC_CAN_MO_Receive+0x19c>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	0c9b      	lsrs	r3, r3, #18
 80012f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6853      	ldr	r3, [r2, #4]
 80012fa:	f361 031c 	bfi	r3, r1, #0, #29
 80012fe:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800130a:	0f5b      	lsrs	r3, r3, #29
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	b2d9      	uxtb	r1, r3
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	7ad3      	ldrb	r3, [r2, #11]
 8001318:	f361 1345 	bfi	r3, r1, #5, #1
 800131c:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7adb      	ldrb	r3, [r3, #11]
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00d      	beq.n	8001348 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <XMC_CAN_MO_Receive+0x19c>)
 8001334:	4013      	ands	r3, r2
 8001336:	0c9b      	lsrs	r3, r3, #18
 8001338:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6893      	ldr	r3, [r2, #8]
 8001340:	f361 031c 	bfi	r3, r1, #0, #29
 8001344:	6093      	str	r3, [r2, #8]
 8001346:	e032      	b.n	80013ae <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6893      	ldr	r3, [r2, #8]
 8001356:	f361 031c 	bfi	r3, r1, #0, #29
 800135a:	6093      	str	r3, [r2, #8]
 800135c:	e027      	b.n	80013ae <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	79d3      	ldrb	r3, [r2, #7]
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6853      	ldr	r3, [r2, #4]
 8001376:	f361 031c 	bfi	r3, r1, #0, #29
 800137a:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6893      	ldr	r3, [r2, #8]
 800138a:	f361 031c 	bfi	r3, r1, #0, #29
 800138e:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800139a:	0f5b      	lsrs	r3, r3, #29
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	b2d9      	uxtb	r1, r3
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	7ad3      	ldrb	r3, [r2, #11]
 80013a8:	f361 1345 	bfi	r3, r1, #5, #1
 80013ac:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80013b8:	0e1b      	lsrs	r3, r3, #24
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 80013f0:	7dbb      	ldrb	r3, [r7, #22]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <XMC_CAN_MO_Receive+0x182>
 80013f6:	7d7b      	ldrb	r3, [r7, #21]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f af63 	bne.w	80012c4 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 8001404:	2300      	movs	r3, #0
 8001406:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 8001408:	7dfb      	ldrb	r3, [r7, #23]
}
 800140a:	4618      	mov	r0, r3
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	1ffc0000 	.word	0x1ffc0000

0800141c <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800142c:	d006      	beq.n	800143c <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e005      	b.n	8001448 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699a      	ldr	r2, [r3, #24]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
}
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
 8001460:	4613      	mov	r3, r2
 8001462:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4619      	mov	r1, r3
 800146e:	2303      	movs	r3, #3
 8001470:	408b      	lsls	r3, r1
 8001472:	43db      	mvns	r3, r3
 8001474:	401a      	ands	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800147e:	78bb      	ldrb	r3, [r7, #2]
 8001480:	78f9      	ldrb	r1, [r7, #3]
 8001482:	0049      	lsls	r1, r1, #1
 8001484:	408b      	lsls	r3, r1
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014b0:	0a1b      	lsrs	r3, r3, #8
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_EnableIRQ+0x34>)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	095b      	lsrs	r3, r3, #5
 80014da:	79fa      	ldrb	r2, [r7, #7]
 80014dc:	f002 021f 	and.w	r2, r2, #31
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	490d      	ldr	r1, [pc, #52]	; (8001544 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	4909      	ldr	r1, [pc, #36]	; (8001548 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	0092      	lsls	r2, r2, #2
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
  }
}
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b06      	cmp	r3, #6
 8001568:	bf28      	it	cs
 800156a:	2306      	movcs	r3, #6
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3306      	adds	r3, #6
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b01      	subs	r3, #1
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2201      	movs	r2, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	401a      	ands	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	1e59      	subs	r1, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80015a0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop

080015b0 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff7e 	bl	80014c0 <__NVIC_EnableIRQ>
}
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop

080015cc <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	781c      	ldrb	r4, [r3, #0]
 80015d8:	f7ff ff64 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015dc:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80015e2:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	f7ff ffad 	bl	800154c <NVIC_EncodePriority>
 80015f2:	4602      	mov	r2, r0
 80015f4:	b263      	sxtb	r3, r4
 80015f6:	4618      	mov	r0, r3
 80015f8:	4611      	mov	r1, r2
 80015fa:	f7ff ff7d 	bl	80014f8 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	78db      	ldrb	r3, [r3, #3]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffd2 	bl	80015b0 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop

08001618 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7a5b      	ldrb	r3, [r3, #9]
 8001628:	f083 0301 	eor.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00d      	beq.n	800164e <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4610      	mov	r0, r2
 800163c:	2101      	movs	r1, #1
 800163e:	461a      	mov	r2, r3
 8001640:	f7ff fcda 	bl	8000ff8 <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 800164e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7c1a      	ldrb	r2, [r3, #16]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3304      	adds	r3, #4
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	f7fe fe93 	bl	800039c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7c1a      	ldrb	r2, [r3, #16]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7c5b      	ldrb	r3, [r3, #17]
 8001682:	4608      	mov	r0, r1
 8001684:	4611      	mov	r1, r2
 8001686:	461a      	mov	r2, r3
 8001688:	f7ff fee4 	bl	8001454 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff ffd6 	bl	8001698 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <SystemCoreSetup+0x94>)
 80016f0:	4a21      	ldr	r2, [pc, #132]	; (8001778 <SystemCoreSetup+0x98>)
 80016f2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016f4:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80016f8:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80016fa:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <SystemCoreSetup+0x94>)
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <SystemCoreSetup+0x94>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001702:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001706:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <SystemCoreSetup+0x9c>)
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	3314      	adds	r3, #20
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f023 030f 	bic.w	r3, r3, #15
 800171c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <SystemCoreSetup+0x9c>)
 8001728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172c:	3314      	adds	r3, #20
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8001732:	4a10      	ldr	r2, [pc, #64]	; (8001774 <SystemCoreSetup+0x94>)
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <SystemCoreSetup+0x94>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f023 0310 	bic.w	r3, r3, #16
 800173c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800173e:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <SystemCoreSetup+0x94>)
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <SystemCoreSetup+0x94>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	f023 0308 	bic.w	r3, r3, #8
 8001748:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <SystemCoreSetup+0x94>)
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <SystemCoreSetup+0x94>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001754:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <SystemCoreSetup+0x94>)
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemCoreSetup+0x94>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001760:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <SystemCoreSetup+0x94>)
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <SystemCoreSetup+0x94>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	08000000 	.word	0x08000000
 800177c:	58001000 	.word	0x58001000

08001780 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]

  return (status);
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <OSCHP_GetFrequency+0x10>)
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	00b71b00 	.word	0x00b71b00

080017b4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <SystemCoreClockSetup+0x48>)
 80017bc:	1d3c      	adds	r4, r7, #4
 80017be:	461d      	mov	r5, r3
 80017c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe feda 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7fe ffd5 	bl	8000780 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7fe ff8a 	bl	80006f0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80017dc:	2004      	movs	r0, #4
 80017de:	f7ff f85b 	bl	8000898 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80017e2:	2001      	movs	r0, #1
 80017e4:	2120      	movs	r1, #32
 80017e6:	f7ff f89b 	bl	8000920 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7fe ff94 	bl	8000718 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff f865 	bl	80008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bdb0      	pop	{r4, r5, r7, pc}
 80017fc:	08001f44 	.word	0x08001f44

08001800 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	460b      	mov	r3, r1
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	7afb      	ldrb	r3, [r7, #11]
 8001814:	2107      	movs	r1, #7
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	401a      	ands	r2, r3
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	431a      	orrs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	609a      	str	r2, [r3, #8]
}
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop

08001838 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	60da      	str	r2, [r3, #12]
}
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <XMC_CAN_NODE_GetStatus>:
 *  XMC_CAN_NODE_ClearStatus()
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return ((can_node->NSR));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop

080018dc <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop

080018fc <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 0201 	bic.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop

0800191c <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop

0800193c <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	460b      	mov	r3, r1
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	6891      	ldr	r1, [r2, #8]
 8001954:	7afa      	ldrb	r2, [r7, #11]
 8001956:	2007      	movs	r0, #7
 8001958:	fa00 f202 	lsl.w	r2, r0, r2
 800195c:	43d2      	mvns	r2, r2
 800195e:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 8001960:	7afa      	ldrb	r2, [r7, #11]
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8001968:	430a      	orrs	r2, r1
 800196a:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop

08001978 <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69db      	ldr	r3, [r3, #28]
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	6811      	ldr	r1, [r2, #0]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80019ca:	f7ff ffe3 	bl	8001994 <XMC_CAN_MO_EnableEvent>
}
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80019e6:	f7ff ffd5 	bl	8001994 <XMC_CAN_MO_EnableEvent>
}
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f831 	bl	8001a64 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	68f9      	ldr	r1, [r7, #12]
 8001a40:	f7ff fcec 	bl	800141c <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001a58:	f7ff fce0 	bl	800141c <XMC_CAN_NODE_EnableEvent>
  }

}
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop

08001a64 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a76:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8001a78:	4610      	mov	r0, r2
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f7ff febf 	bl	8001800 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a8c:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8001a8e:	4610      	mov	r0, r2
 8001a90:	2104      	movs	r1, #4
 8001a92:	461a      	mov	r2, r3
 8001a94:	f7ff feb4 	bl	8001800 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa2:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f7ff fea9 	bl	8001800 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab8:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8001aba:	4610      	mov	r0, r2
 8001abc:	210c      	movs	r1, #12
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f7ff fe9e 	bl	8001800 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop

08001acc <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff facd 	bl	8001078 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	79db      	ldrb	r3, [r3, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	795b      	ldrb	r3, [r3, #5]
 8001aee:	4610      	mov	r0, r2
 8001af0:	2104      	movs	r1, #4
 8001af2:	461a      	mov	r2, r3
 8001af4:	f7ff ff22 	bl	800193c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff5d 	bl	80019b8 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7a1b      	ldrb	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00b      	beq.n	8001b1e <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	799b      	ldrb	r3, [r3, #6]
 8001b0e:	4610      	mov	r0, r2
 8001b10:	2100      	movs	r1, #0
 8001b12:	461a      	mov	r2, r3
 8001b14:	f7ff ff12 	bl	800193c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff5b 	bl	80019d4 <CAN_NODE_MO_EnableRxEvent>
  }

}
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fb73 	bl	8001220 <XMC_CAN_MO_Transmit>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]
  return (status);
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fb8f 	bl	800127c <XMC_CAN_MO_Receive>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	73fb      	strb	r3, [r7, #15]
  return (status);
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <CAN_NODE_MO_GetStatus>:
  return (status);
}

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fefd 	bl	8001978 <XMC_CAN_MO_GetStatus>
 8001b7e:	60f8      	str	r0, [r7, #12]

  return (status);
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop

08001b8c <CAN_NODE_GetStatus>:

}

/* Function to read the current status of the CAN node  */
uint32_t CAN_NODE_GetStatus(const CAN_NODE_t* handle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t  status;

  XMC_ASSERT("CAN_NODE_GetStatus: handle null", handle != NULL);

  XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  status = XMC_CAN_NODE_GetStatus(can_node);
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f7ff fe72 	bl	8001884 <XMC_CAN_NODE_GetStatus>
 8001ba0:	60b8      	str	r0, [r7, #8]
  return (status);
 8001ba2:	68bb      	ldr	r3, [r7, #8]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fd27 	bl	8001618 <GLOBAL_CAN_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 8087 	bne.w	8001ce4 <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f911 	bl	8000e08 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d178      	bne.n	8001cde <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe53 	bl	800189c <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fe6e 	bl	80018dc <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fe89 	bl	800191c <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fe23 	bl	8001864 <XMC_CAN_NODE_EnableLoopBack>
 8001c1e:	e018      	b.n	8001c52 <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2e:	791a      	ldrb	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c36:	4608      	mov	r0, r1
 8001c38:	4611      	mov	r1, r2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f7fe fbae 	bl	800039c <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7ff fdf3 	bl	8001838 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fecc 	bl	80019f0 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	e019      	b.n	8001c92 <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3302      	adds	r3, #2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6859      	ldr	r1, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	791b      	ldrb	r3, [r3, #4]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	f7ff f967 	bl	8000f54 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 8001c86:	68b8      	ldr	r0, [r7, #8]
 8001c88:	f7ff ff20 	bl	8001acc <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8de      	bhi.n	8001c5e <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fe09 	bl	80018bc <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe24 	bl	80018fc <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d011      	beq.n	8001ce8 <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6819      	ldr	r1, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	791a      	ldrb	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	4608      	mov	r0, r1
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f7fe fb60 	bl	800039c <XMC_GPIO_Init>
 8001cdc:	e004      	b.n	8001ce8 <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
 8001ce2:	e001      	b.n	8001ce8 <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop

08001cf4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001cfe:	4815      	ldr	r0, [pc, #84]	; (8001d54 <DAVE_Init+0x60>)
 8001d00:	f7ff fd3e 	bl	8001780 <CLOCK_XMC4_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d104      	bne.n	8001d18 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_Indicator */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_Indicator); 
 8001d0e:	4812      	ldr	r0, [pc, #72]	; (8001d58 <DAVE_Init+0x64>)
 8001d10:	f7ff fca2 	bl	8001658 <DIGITAL_IO_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance BoardButton */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BoardButton); 
 8001d1e:	480f      	ldr	r0, [pc, #60]	; (8001d5c <DAVE_Init+0x68>)
 8001d20:	f7ff fc9a 	bl	8001658 <DIGITAL_IO_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d104      	bne.n	8001d38 <DAVE_Init+0x44>
  {
	 /**  Initialization of CAN_NODE APP instance React_Node */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&React_Node); 
 8001d2e:	480c      	ldr	r0, [pc, #48]	; (8001d60 <DAVE_Init+0x6c>)
 8001d30:	f7ff ff3c 	bl	8001bac <CAN_NODE_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d104      	bne.n	8001d48 <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance Receive_CAN_Handler */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&Receive_CAN_Handler); 
 8001d3e:	4809      	ldr	r0, [pc, #36]	; (8001d64 <DAVE_Init+0x70>)
 8001d40:	f7ff fc44 	bl	80015cc <INTERRUPT_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8001d48:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	1fffc85c 	.word	0x1fffc85c
 8001d58:	08001f1c 	.word	0x08001f1c
 8001d5c:	08001f30 	.word	0x08001f30
 8001d60:	08001f9c 	.word	0x08001f9c
 8001d64:	08001f18 	.word	0x08001f18

08001d68 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	605a      	str	r2, [r3, #4]
}
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	f003 0301 	and.w	r3, r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop

08001db4 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7c1b      	ldrb	r3, [r3, #16]
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f7ff ffce 	bl	8001d68 <XMC_GPIO_ToggleOutput>
}
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop

08001dd4 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7c1b      	ldrb	r3, [r3, #16]
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7ff ffd0 	bl	8001d8c <XMC_GPIO_GetInput>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop

08001df8 <CAN0_1_IRQHandler>:
uint32_t button_state = 1;

// Function Prototypes
//void initialise_monitor_handles();

void React_Node_Handler() {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
	/* Check for Node error */
	if(CAN_NODE_GetStatus(&React_Node) & XMC_CAN_NODE_STATUS_LAST_ERROR_CODE)
 8001dfe:	4818      	ldr	r0, [pc, #96]	; (8001e60 <CAN0_1_IRQHandler+0x68>)
 8001e00:	f7ff fec4 	bl	8001b8c <CAN_NODE_GetStatus>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d124      	bne.n	8001e58 <CAN0_1_IRQHandler+0x60>
	{}
	else if(CAN_NODE_MO_GetStatus(&React_Node_LMO_01_Config) & XMC_CAN_MO_STATUS_RX_PENDING)
 8001e0e:	4815      	ldr	r0, [pc, #84]	; (8001e64 <CAN0_1_IRQHandler+0x6c>)
 8001e10:	f7ff feac 	bl	8001b6c <CAN_NODE_MO_GetStatus>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01c      	beq.n	8001e58 <CAN0_1_IRQHandler+0x60>
	{
		/* Read the received Message object and stores in Request_Node_LMO_02_Config*/
		CAN_NODE_MO_Receive(&React_Node_LMO_01_Config);
 8001e1e:	4811      	ldr	r0, [pc, #68]	; (8001e64 <CAN0_1_IRQHandler+0x6c>)
 8001e20:	f7ff fe92 	bl	8001b48 <CAN_NODE_MO_Receive>
		int receivedBytes = React_Node_LMO_01_Config.mo_ptr->can_data_byte[0];
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <CAN0_1_IRQHandler+0x6c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	7c1b      	ldrb	r3, [r3, #16]
 8001e2a:	607b      	str	r3, [r7, #4]

		if (receivedBytes == 0x01) { // Turn on LED
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d112      	bne.n	8001e58 <CAN0_1_IRQHandler+0x60>
			DIGITAL_IO_ToggleOutput(&LED_Indicator);
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <CAN0_1_IRQHandler+0x70>)
 8001e34:	f7ff ffbe 	bl	8001db4 <DIGITAL_IO_ToggleOutput>
			XMC_DEBUG("4200: Message Received from 4200\n");
			XMC_DEBUG("Received with value: %d \n", receivedBytes);
			XMC_DEBUG("Toggle LED\n\n");

			React_Node_LMO_02_Config.mo_ptr->can_data_byte[0] = 0x03;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <CAN0_1_IRQHandler+0x74>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	741a      	strb	r2, [r3, #16]
			uint32_t status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(React_Node_LMO_02_Config.mo_ptr);
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <CAN0_1_IRQHandler+0x74>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f9b3 	bl	80011b0 <XMC_CAN_MO_UpdateData>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	603b      	str	r3, [r7, #0]
			status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
 8001e4e:	4807      	ldr	r0, [pc, #28]	; (8001e6c <CAN0_1_IRQHandler+0x74>)
 8001e50:	f7ff fe68 	bl	8001b24 <CAN_NODE_MO_Transmit>
 8001e54:	4603      	mov	r3, r0
 8001e56:	603b      	str	r3, [r7, #0]
//		else{ // Turn off LED
//			DIGITAL_IO_SetOutputLow(&LED_Indicator);
//		}
	}

}
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	08001f9c 	.word	0x08001f9c
 8001e64:	08001f84 	.word	0x08001f84
 8001e68:	08001f1c 	.word	0x08001f1c
 8001e6c:	08001f90 	.word	0x08001f90

08001e70 <main>:
//		status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
//	}
//}

int main(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0

  DAVE_Init();		/* Initialization of DAVE APPs  */
 8001e76:	f7ff ff3d 	bl	8001cf4 <DAVE_Init>
  // Function to initialize debug printing
  // initialise_monitor_handles();

  while(1U)
  {
	  if (button_state != DIGITAL_IO_GetInput(&BoardButton)) {
 8001e7a:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <main+0x50>)
 8001e7c:	f7ff ffaa 	bl	8001dd4 <DIGITAL_IO_GetInput>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <main+0x54>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d019      	beq.n	8001ebe <main+0x4e>
	  		button_state = DIGITAL_IO_GetInput(&BoardButton);
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <main+0x50>)
 8001e8c:	f7ff ffa2 	bl	8001dd4 <DIGITAL_IO_GetInput>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <main+0x54>)
 8001e94:	601a      	str	r2, [r3, #0]

	  		if (button_state == 0) { // send message to turn toggle
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <main+0x54>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10f      	bne.n	8001ebe <main+0x4e>
	  			React_Node_LMO_02_Config.mo_ptr->can_data_byte[0] = 0x01;
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <main+0x58>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	741a      	strb	r2, [r3, #16]
	  			XMC_DEBUG("4800: Message Sent to 4200 with value 1 (Toggle LED)\n\n");
		  		uint32_t status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(React_Node_LMO_02_Config.mo_ptr);
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <main+0x58>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f980 	bl	80011b0 <XMC_CAN_MO_UpdateData>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	607b      	str	r3, [r7, #4]
		  		status = CAN_NODE_MO_Transmit(&React_Node_LMO_02_Config);
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <main+0x58>)
 8001eb6:	f7ff fe35 	bl	8001b24 <CAN_NODE_MO_Transmit>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	607b      	str	r3, [r7, #4]
	  		}
//	  		} else { // send message to turn led off
//	  			React_Node_LMO_02_Config.mo_ptr->can_data_byte[0] = 0x00;
//	  		}
	  	}
  }
 8001ebe:	e7dc      	b.n	8001e7a <main+0xa>
 8001ec0:	08001f30 	.word	0x08001f30
 8001ec4:	1fffc858 	.word	0x1fffc858
 8001ec8:	08001f90 	.word	0x08001f90

08001ecc <__libc_init_array>:
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <__libc_init_array+0x3c>)
 8001ed0:	4c0e      	ldr	r4, [pc, #56]	; (8001f0c <__libc_init_array+0x40>)
 8001ed2:	1ae4      	subs	r4, r4, r3
 8001ed4:	10a4      	asrs	r4, r4, #2
 8001ed6:	2500      	movs	r5, #0
 8001ed8:	461e      	mov	r6, r3
 8001eda:	42a5      	cmp	r5, r4
 8001edc:	d004      	beq.n	8001ee8 <__libc_init_array+0x1c>
 8001ede:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ee2:	4798      	blx	r3
 8001ee4:	3501      	adds	r5, #1
 8001ee6:	e7f8      	b.n	8001eda <__libc_init_array+0xe>
 8001ee8:	f7ff fad6 	bl	8001498 <_init>
 8001eec:	4c08      	ldr	r4, [pc, #32]	; (8001f10 <__libc_init_array+0x44>)
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <__libc_init_array+0x48>)
 8001ef0:	1ae4      	subs	r4, r4, r3
 8001ef2:	10a4      	asrs	r4, r4, #2
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	461e      	mov	r6, r3
 8001ef8:	42a5      	cmp	r5, r4
 8001efa:	d004      	beq.n	8001f06 <__libc_init_array+0x3a>
 8001efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f00:	4798      	blx	r3
 8001f02:	3501      	adds	r5, #1
 8001f04:	e7f8      	b.n	8001ef8 <__libc_init_array+0x2c>
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	1fffc85c 	.word	0x1fffc85c
 8001f0c:	1fffc85c 	.word	0x1fffc85c
 8001f10:	1fffc85c 	.word	0x1fffc85c
 8001f14:	1fffc85c 	.word	0x1fffc85c

08001f18 <Receive_CAN_Handler>:
 8001f18:	01003f4d                                M?..

08001f1c <LED_Indicator>:
 8001f1c:	48028000 00000080 00010000 00000000     ...H............
 8001f2c:	00000001                                ....

08001f30 <BoardButton>:
 8001f30:	48028100 00000000 00000000 00000000     ...H............
 8001f40:	0000000f 01040350 00010000 00000000     ....P...........
 8001f50:	00010000 01010101                       ........

08001f58 <React_Node_gpio_out>:
 8001f58:	48028200 00000000                       ...H....

08001f60 <React_Node_gpio_out_config>:
 8001f60:	00000088 00000001 00000002              ............

08001f6c <React_Node_gpio_in>:
 8001f6c:	48028e00 00000003                       ...H....

08001f74 <React_Node_gpio_in_config>:
	...

08001f80 <React_Node_sr>:
 8001f80:	00000000                                ....

08001f84 <React_Node_LMO_01_Config>:
 8001f84:	1fffc818 00010023 00000001              ....#.......

08001f90 <React_Node_LMO_02_Config>:
 8001f90:	1fffc838 00000022 00000000              8...".......

08001f9c <React_Node>:
 8001f9c:	1fffc800 48014200 1fffc80c 08001f84     .....B.H........
 8001fac:	08001f90 00000000 00000000 00000000     ................
	...
 8002028:	08001f80 08001f58 08001f60 08001f6c     ....X...`...l...
 8002038:	08001f74 00020001 00000000              t...........
